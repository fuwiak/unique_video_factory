#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
"""

import os
import asyncio
import uuid
from datetime import datetime
from pathlib import Path
from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor
from typing import List, Dict, Tuple
import json
from video_uniquizer import VideoUniquizer
from vidgear.gears import WriteGear
import cv2
import numpy as np


class BatchVideoGenerator:
    """
    –°–∏—Å—Ç–µ–º–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –ø–æ –ø–∞–ø–∫–∞–º
    """
    
    def __init__(self, base_output_dir: str = "generated_videos"):
        self.base_output_dir = Path(base_output_dir)
        self.base_output_dir.mkdir(exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –∫–∞–∫ –≤ MLflow
        self.runs_dir = self.base_output_dir / "runs"
        self.runs_dir.mkdir(exist_ok=True)
        
        print(f"üìÅ –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.base_output_dir}")
    
    def create_run_folder(self, run_name: str = None) -> Path:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (–∫–∞–∫ –≤ MLflow)
        """
        if run_name is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            run_name = f"run_{timestamp}"
        
        run_dir = self.runs_dir / run_name
        run_dir.mkdir(exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
        (run_dir / "versions").mkdir(exist_ok=True)
        (run_dir / "metadata").mkdir(exist_ok=True)
        
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞: {run_dir}")
        return run_dir
    
    def generate_single_version(self, input_video: str, run_dir: Path, 
                              version_id: int, effects: List[str]) -> Dict:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–Ω—É –≤–µ—Ä—Å–∏—é –≤–∏–¥–µ–æ
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤–µ—Ä—Å–∏–∏
            version_dir = run_dir / "versions" / f"version_{version_id:03d}"
            version_dir.mkdir(exist_ok=True)
            
            # –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            output_file = version_dir / f"uniquized_v{version_id:03d}.mp4"
            
            print(f"üé¨ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏—é {version_id}: {effects}")
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ç–æ—Ä
            uniquizer = VideoUniquizer()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
            result_path = uniquizer.uniquize_video(
                input_path=input_video,
                output_path=str(output_file),
                effects=effects
            )
            
            # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata = {
                "version_id": version_id,
                "effects": effects,
                "input_file": input_video,
                "output_file": str(result_path),
                "file_size_mb": os.path.getsize(result_path) / (1024*1024),
                "generated_at": datetime.now().isoformat(),
                "status": "success"
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata_file = version_dir / "metadata.json"
            with open(metadata_file, 'w', encoding='utf-8') as f:
                json.dump(metadata, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ –í–µ—Ä—Å–∏—è {version_id} –≥–æ—Ç–æ–≤–∞: {result_path}")
            return metadata
            
        except Exception as e:
            error_metadata = {
                "version_id": version_id,
                "effects": effects,
                "error": str(e),
                "generated_at": datetime.now().isoformat(),
                "status": "error"
            }
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≤–µ—Ä—Å–∏–∏ {version_id}: {e}")
            return error_metadata
    
    async def generate_batch_async(self, input_video: str, n_versions: int = 3, 
                                 run_name: str = None) -> Dict:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞ –≤–∏–¥–µ–æ
        """
        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é {n_versions} –≤–µ—Ä—Å–∏–π")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        run_dir = self.create_run_folder(run_name)
        
        # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        effect_combinations = [
            ['temporal'],
            ['social'],
            ['visual'],
            ['temporal', 'social'],
            ['temporal', 'visual'],
            ['social', 'visual'],
            ['temporal', 'social', 'visual']
        ]
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        tasks = []
        for i in range(n_versions):
            # –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
            effects = effect_combinations[i % len(effect_combinations)]
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            task = asyncio.create_task(
                self._generate_version_async(input_video, run_dir, i+1, effects)
            )
            tasks.append(task)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        print(f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(tasks)} –≤–µ—Ä—Å–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ...")
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful = [r for r in results if isinstance(r, dict) and r.get('status') == 'success']
        failed = [r for r in results if isinstance(r, dict) and r.get('status') == 'error']
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞–ø—É—Å–∫–∞
        run_summary = {
            "run_name": run_name or f"run_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            "input_video": input_video,
            "total_versions": n_versions,
            "successful": len(successful),
            "failed": len(failed),
            "run_dir": str(run_dir),
            "generated_at": datetime.now().isoformat(),
            "results": results
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–¥–∫—É
        summary_file = run_dir / "metadata" / "run_summary.json"
        with open(summary_file, 'w', encoding='utf-8') as f:
            json.dump(run_summary, f, indent=2, ensure_ascii=False)
        
        print(f"\nüéâ –ü–ê–ö–ï–¢–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print(f"üìÅ –ü–∞–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞: {run_dir}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(successful)}/{n_versions}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {len(failed)}")
        
        return run_summary
    
    async def _generate_version_async(self, input_video: str, run_dir: Path, 
                                    version_id: int, effects: List[str]) -> Dict:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        """
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        loop = asyncio.get_event_loop()
        with ThreadPoolExecutor() as executor:
            result = await loop.run_in_executor(
                executor, 
                self.generate_single_version,
                input_video, run_dir, version_id, effects
            )
        return result
    
    def generate_batch_parallel(self, input_video: str, n_versions: int = 3, 
                              run_name: str = None) -> Dict:
        """
        –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º multiprocessing
        """
        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é {n_versions} –≤–µ—Ä—Å–∏–π")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        run_dir = self.create_run_folder(run_name)
        
        # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        effect_combinations = [
            ['temporal'],
            ['social'], 
            ['visual'],
            ['temporal', 'social'],
            ['temporal', 'visual'],
            ['social', 'visual'],
            ['temporal', 'social', 'visual']
        ]
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        tasks = []
        for i in range(n_versions):
            effects = effect_combinations[i % len(effect_combinations)]
            tasks.append((input_video, run_dir, i+1, effects))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        print(f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(tasks)} –≤–µ—Ä—Å–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ...")
        
        with ProcessPoolExecutor(max_workers=min(n_versions, 4)) as executor:
            futures = [
                executor.submit(self.generate_single_version, *task) 
                for task in tasks
            ]
            
            results = []
            for future in futures:
                try:
                    result = future.result()
                    results.append(result)
                except Exception as e:
                    error_result = {
                        "error": str(e),
                        "status": "error",
                        "generated_at": datetime.now().isoformat()
                    }
                    results.append(error_result)
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful = [r for r in results if r.get('status') == 'success']
        failed = [r for r in results if r.get('status') == 'error']
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞–ø—É—Å–∫–∞
        run_summary = {
            "run_name": run_name or f"run_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            "input_video": input_video,
            "total_versions": n_versions,
            "successful": len(successful),
            "failed": len(failed),
            "run_dir": str(run_dir),
            "generated_at": datetime.now().isoformat(),
            "results": results
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–¥–∫—É
        summary_file = run_dir / "metadata" / "run_summary.json"
        with open(summary_file, 'w', encoding='utf-8') as f:
            json.dump(run_summary, f, indent=2, ensure_ascii=False)
        
        print(f"\nüéâ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print(f"üìÅ –ü–∞–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞: {run_dir}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(successful)}/{n_versions}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {len(failed)}")
        
        return run_summary
    
    def generate_batch_sequential(self, input_video: str, n_versions: int = 3, 
                                run_name: str = None) -> Dict:
        """
        –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (—Å–∞–º–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è)
        """
        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é {n_versions} –≤–µ—Ä—Å–∏–π")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        run_dir = self.create_run_folder(run_name)
        
        # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        effect_combinations = [
            ['temporal'],
            ['social'], 
            ['visual'],
            ['temporal', 'social'],
            ['temporal', 'visual'],
            ['social', 'visual'],
            ['temporal', 'social', 'visual']
        ]
        
        results = []
        print(f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {n_versions} –≤–µ—Ä—Å–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ...")
        
        for i in range(n_versions):
            effects = effect_combinations[i % len(effect_combinations)]
            print(f"\nüìù –í–µ—Ä—Å–∏—è {i+1}/{n_versions}: {effects}")
            
            try:
                result = self.generate_single_version(
                    input_video, run_dir, i+1, effects
                )
                results.append(result)
            except Exception as e:
                error_result = {
                    "version_id": i+1,
                    "effects": effects,
                    "error": str(e),
                    "status": "error",
                    "generated_at": datetime.now().isoformat()
                }
                results.append(error_result)
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≤–µ—Ä—Å–∏–∏ {i+1}: {e}")
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful = [r for r in results if r.get('status') == 'success']
        failed = [r for r in results if r.get('status') == 'error']
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞–ø—É—Å–∫–∞
        run_summary = {
            "run_name": run_name or f"run_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            "input_video": input_video,
            "total_versions": n_versions,
            "successful": len(successful),
            "failed": len(failed),
            "run_dir": str(run_dir),
            "generated_at": datetime.now().isoformat(),
            "results": results
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–¥–∫—É
        summary_file = run_dir / "metadata" / "run_summary.json"
        with open(summary_file, 'w', encoding='utf-8') as f:
            json.dump(run_summary, f, indent=2, ensure_ascii=False)
        
        print(f"\nüéâ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print(f"üìÅ –ü–∞–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞: {run_dir}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(successful)}/{n_versions}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {len(failed)}")
        
        return run_summary
    
    def list_runs(self) -> List[Dict]:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø—É—Å–∫–æ–≤
        """
        runs = []
        for run_dir in self.runs_dir.iterdir():
            if run_dir.is_dir():
                summary_file = run_dir / "metadata" / "run_summary.json"
                if summary_file.exists():
                    with open(summary_file, 'r', encoding='utf-8') as f:
                        run_info = json.load(f)
                    runs.append(run_info)
        
        return sorted(runs, key=lambda x: x['generated_at'], reverse=True)
    
    def get_run_info(self, run_name: str) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
        """
        run_dir = self.runs_dir / run_name
        summary_file = run_dir / "metadata" / "run_summary.json"
        
        if summary_file.exists():
            with open(summary_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}


def main():
    """
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è BatchVideoGenerator
    """
    import sys
    
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python batch_generator.py <–≤–∏–¥–µ–æ_—Ñ–∞–π–ª> [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≤–µ—Ä—Å–∏–π] [–∏–º—è_–∑–∞–ø—É—Å–∫–∞]")
        print("–ü—Ä–∏–º–µ—Ä: python batch_generator.py test.mp4 5 my_experiment")
        return
    
    input_video = sys.argv[1]
    n_versions = int(sys.argv[2]) if len(sys.argv) > 2 else 3
    run_name = sys.argv[3] if len(sys.argv) > 3 else None
    
    if not os.path.exists(input_video):
        print(f"‚ùå –§–∞–π–ª {input_video} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    generator = BatchVideoGenerator()
    
    # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    print("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
    print("1. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è (async/await)")
    print("2. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è (multiprocessing)")
    
    choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-2): ").strip()
    
    try:
        if choice == "1":
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            result = asyncio.run(generator.generate_batch_async(
                input_video, n_versions, run_name
            ))
        else:
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            result = generator.generate_batch_parallel(
                input_video, n_versions, run_name
            )
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"   –ü–∞–ø–∫–∞: {result['run_dir']}")
        print(f"   –£—Å–ø–µ—à–Ω–æ: {result['successful']}/{result['total_versions']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
