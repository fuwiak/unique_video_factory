#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
"""

import os
import json
from pathlib import Path


def show_quick_summary():
    """–ë—ã—Å—Ç—Ä—ã–π –æ–±–∑–æ—Ä –≤—Å–µ—Ö –∑–∞–ø—É—Å–∫–æ–≤"""
    base_dir = Path("generated_videos/runs")
    
    if not base_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ generated_videos –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    print("üìä –ë–´–°–¢–†–´–ô –û–ë–ó–û–† –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 50)
    
    runs = []
    for run_dir in base_dir.iterdir():
        if run_dir.is_dir():
            summary_file = run_dir / "metadata" / "run_summary.json"
            if summary_file.exists():
                with open(summary_file, 'r', encoding='utf-8') as f:
                    run_info = json.load(f)
                runs.append(run_info)
    
    if not runs:
        print("‚ùå –ó–∞–ø—É—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    runs.sort(key=lambda x: x['generated_at'], reverse=True)
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø—É—Å–∫–æ–≤: {len(runs)}")
    print()
    
    for i, run in enumerate(runs, 1):
        print(f"{i}. {run['run_name']}")
        print(f"   üìπ –í–∏–¥–µ–æ: {os.path.basename(run['input_video'])}")
        print(f"   üìä –í–µ—Ä—Å–∏–π: {run['successful']}/{run['total_versions']}")
        print(f"   üìÅ –ü–∞–ø–∫–∞: {run['run_dir']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
        run_path = Path(run['run_dir'])
        if run_path.exists():
            total_size = 0
            video_count = 0
            for version_dir in (run_path / "versions").iterdir():
                if version_dir.is_dir():
                    for video_file in version_dir.glob("*.mp4"):
                        total_size += video_file.stat().st_size
                        video_count += 1
            
            if video_count > 0:
                total_mb = total_size / (1024*1024)
                print(f"   üíæ –†–∞–∑–º–µ—Ä: {total_mb:.1f} MB ({video_count} —Ñ–∞–π–ª–æ–≤)")
        
        print()


def show_run_files(run_name: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
    run_path = Path(f"generated_videos/runs/{run_name}")
    
    if not run_path.exists():
        print(f"‚ùå –ó–∞–ø—É—Å–∫ '{run_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    print(f"üìÅ –§–ê–ô–õ–´ –ó–ê–ü–£–°–ö–ê: {run_name}")
    print("=" * 50)
    
    versions_dir = run_path / "versions"
    if not versions_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ versions –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    total_size = 0
    for version_dir in sorted(versions_dir.iterdir()):
        if version_dir.is_dir():
            version_name = version_dir.name
            video_files = list(version_dir.glob("*.mp4"))
            
            if video_files:
                video_file = video_files[0]
                size_mb = video_file.stat().st_size / (1024*1024)
                total_size += video_file.stat().st_size
                
                print(f"   ‚Ä¢ {version_name}: {video_file.name} ({size_mb:.1f} MB)")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                metadata_file = version_dir / "metadata.json"
                if metadata_file.exists():
                    with open(metadata_file, 'r', encoding='utf-8') as f:
                        metadata = json.load(f)
                    effects = metadata.get('effects', [])
                    print(f"     –≠—Ñ—Ñ–µ–∫—Ç—ã: {', '.join(effects)}")
    
    if total_size > 0:
        total_mb = total_size / (1024*1024)
        print(f"\nüíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_mb:.1f} MB")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import sys
    
    if len(sys.argv) > 1:
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        run_name = sys.argv[1]
        show_run_files(run_name)
    else:
        # –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â–∏–π –æ–±–∑–æ—Ä
        show_quick_summary()


if __name__ == "__main__":
    main()
