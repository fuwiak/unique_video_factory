#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Yandex Disk
"""

import os
import asyncio
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Callable
import json
import uuid
import threading
import concurrent.futures
from concurrent.futures import ThreadPoolExecutor
import time
from http.server import HTTPServer, BaseHTTPRequestHandler
import websockets
import aiohttp

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    CallbackQueryHandler, filters, ContextTypes
)
from dotenv import load_dotenv
import yadisk
from video_uniquizer import VideoUniquizer

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
YANDEX_DISK_TOKEN = os.getenv('YANDEX_DISK_TOKEN')
YANDEX_DISK_FOLDER = os.getenv('YANDEX_DISK_FOLDER', 'unique_video_factory')
MAX_VIDEO_SIZE_MB = int(os.getenv('MAX_VIDEO_SIZE_MB', '300'))

# Self-hosted Bot API configuration
USE_SELF_HOSTED_API = os.getenv('USE_SELF_HOSTED_API', 'false').lower() == 'true'
SELF_HOSTED_API_URL = os.getenv('SELF_HOSTED_API_URL', 'https://api.telegram.org')
MAX_FILE_SIZE_MB = int(os.getenv('MAX_FILE_SIZE_MB', '2000'))  # 2GB for self-hosted

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è –∞–ø—Ä—É–≤–∞ –≤–∏–¥–µ–æ
manager_states = {}

# –û—á–µ—Ä–µ–¥—å –≤–∏–¥–µ–æ –Ω–∞ –∞–ø–ø—Ä—É–≤
pending_approvals = {}

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã Instagram —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–∫–æ—Ä–æ—Å—Ç—è–º–∏
INSTAGRAM_FILTERS = {
    'vintage_slow': {
        'name': 'üì∏ –í–∏–Ω—Ç–∞–∂–Ω—ã–π (–º–µ–¥–ª–µ–Ω–Ω–æ)',
        'description': '–¢–µ–ø–ª—ã–µ —Ç–æ–Ω–∞, –≤–∏–Ω—å–µ—Ç–∫–∞, –∑–µ—Ä–Ω–æ, 0.8x —Å–∫–æ—Ä–æ—Å—Ç—å',
        'effects': ['social', 'temporal'],
        'params': {'warmth': 0.9, 'vignette': 0.2, 'grain': 0.1, 'speed': 0.8}
    },
    'vintage_normal': {
        'name': 'üì∏ –í–∏–Ω—Ç–∞–∂–Ω—ã–π (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)',
        'description': '–¢–µ–ø–ª—ã–µ —Ç–æ–Ω–∞, –≤–∏–Ω—å–µ—Ç–∫–∞, –∑–µ—Ä–Ω–æ, 1.0x —Å–∫–æ—Ä–æ—Å—Ç—å',
        'effects': ['social'],
        'params': {'warmth': 0.9, 'vignette': 0.2, 'grain': 0.1, 'speed': 1.0}
    },
    'vintage_fast': {
        'name': 'üì∏ –í–∏–Ω—Ç–∞–∂–Ω—ã–π (–±—ã—Å—Ç—Ä–æ)',
        'description': '–¢–µ–ø–ª—ã–µ —Ç–æ–Ω–∞, –≤–∏–Ω—å–µ—Ç–∫–∞, –∑–µ—Ä–Ω–æ, 1.2x —Å–∫–æ—Ä–æ—Å—Ç—å',
        'effects': ['social', 'temporal'],
        'params': {'warmth': 0.9, 'vignette': 0.2, 'grain': 0.1, 'speed': 1.2}
    },
    'dramatic_slow': {
        'name': 'üé≠ –î—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∏–π (–º–µ–¥–ª–µ–Ω–Ω–æ)',
        'description': '–í—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç, —Ç–µ–Ω–∏, –±–ª–∏–∫–∏, 0.8x —Å–∫–æ—Ä–æ—Å—Ç—å',
        'effects': ['social', 'temporal'],
        'params': {'contrast': 1.15, 'shadows': 0.8, 'highlights': 1.2, 'speed': 0.8}
    },
    'dramatic_normal': {
        'name': 'üé≠ –î—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∏–π (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)',
        'description': '–í—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç, —Ç–µ–Ω–∏, –±–ª–∏–∫–∏, 1.0x —Å–∫–æ—Ä–æ—Å—Ç—å',
        'effects': ['social'],
        'params': {'contrast': 1.15, 'shadows': 0.8, 'highlights': 1.2, 'speed': 1.0}
    },
    'dramatic_fast': {
        'name': 'üé≠ –î—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∏–π (–±—ã—Å—Ç—Ä–æ)',
        'description': '–í—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç, —Ç–µ–Ω–∏, –±–ª–∏–∫–∏, 1.2x —Å–∫–æ—Ä–æ—Å—Ç—å',
        'effects': ['social', 'temporal'],
        'params': {'contrast': 1.15, 'shadows': 0.8, 'highlights': 1.2, 'speed': 1.2}
    },
    'soft_slow': {
        'name': 'üå∏ –ú—è–≥–∫–∏–π (–º–µ–¥–ª–µ–Ω–Ω–æ)',
        'description': '–†–∞–∑–º—ã—Ç–∏–µ, –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è —è—Ä–∫–æ—Å—Ç—å, 0.8x —Å–∫–æ—Ä–æ—Å—Ç—å',
        'effects': ['social', 'temporal'],
        'params': {'blur': 0.5, 'brightness': 5, 'saturation': 0.9, 'speed': 0.8}
    },
    'soft_normal': {
        'name': 'üå∏ –ú—è–≥–∫–∏–π (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)',
        'description': '–†–∞–∑–º—ã—Ç–∏–µ, –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è —è—Ä–∫–æ—Å—Ç—å, 1.0x —Å–∫–æ—Ä–æ—Å—Ç—å',
        'effects': ['social'],
        'params': {'blur': 0.5, 'brightness': 5, 'saturation': 0.9, 'speed': 1.0}
    },
    'soft_fast': {
        'name': 'üå∏ –ú—è–≥–∫–∏–π (–±—ã—Å—Ç—Ä–æ)',
        'description': '–†–∞–∑–º—ã—Ç–∏–µ, –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è —è—Ä–∫–æ—Å—Ç—å, 1.2x —Å–∫–æ—Ä–æ—Å—Ç—å',
        'effects': ['social', 'temporal'],
        'params': {'blur': 0.5, 'brightness': 5, 'saturation': 0.9, 'speed': 1.2}
    },
    'vibrant_slow': {
        'name': 'üåà –Ø—Ä–∫–∏–π (–º–µ–¥–ª–µ–Ω–Ω–æ)',
        'description': '–£—Å–∏–ª–µ–Ω–Ω–∞—è –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å, —á–µ—Ç–∫–æ—Å—Ç—å, 0.8x —Å–∫–æ—Ä–æ—Å—Ç—å',
        'effects': ['social', 'temporal'],
        'params': {'saturation': 1.2, 'vibrance': 1.15, 'clarity': 1.1, 'speed': 0.8}
    },
    'vibrant_normal': {
        'name': 'üåà –Ø—Ä–∫–∏–π (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)',
        'description': '–£—Å–∏–ª–µ–Ω–Ω–∞—è –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å, —á–µ—Ç–∫–æ—Å—Ç—å, 1.0x —Å–∫–æ—Ä–æ—Å—Ç—å',
        'effects': ['social'],
        'params': {'saturation': 1.2, 'vibrance': 1.15, 'clarity': 1.1, 'speed': 1.0}
    },
    'vibrant_fast': {
        'name': 'üåà –Ø—Ä–∫–∏–π (–±—ã—Å—Ç—Ä–æ)',
        'description': '–£—Å–∏–ª–µ–Ω–Ω–∞—è –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å, —á–µ—Ç–∫–æ—Å—Ç—å, 1.2x —Å–∫–æ—Ä–æ—Å—Ç—å',
        'effects': ['social', 'temporal'],
        'params': {'saturation': 1.2, 'vibrance': 1.15, 'clarity': 1.1, 'speed': 1.2}
    }
}


class WebSocketUploadProgress:
    """WebSocket upload progress tracker"""
    
    def __init__(self, user_id: int, filename: str):
        self.user_id = user_id
        self.filename = filename
        self.uploaded_bytes = 0
        self.total_bytes = 0
        self.progress_percent = 0
        self.status = "starting"
        self.start_time = time.time()
        self.websocket_clients = set()
    
    def update_progress(self, uploaded: int, total: int):
        """Update upload progress"""
        self.uploaded_bytes = uploaded
        self.total_bytes = total
        self.progress_percent = (uploaded / total * 100) if total > 0 else 0
        
        # Broadcast progress to WebSocket clients
        self.broadcast_progress()
    
    def set_status(self, status: str):
        """Set upload status"""
        self.status = status
        self.broadcast_progress()
    
    def broadcast_progress(self):
        """Broadcast progress to all connected WebSocket clients"""
        progress_data = {
            "type": "upload_progress",
            "user_id": self.user_id,
            "filename": self.filename,
            "uploaded_bytes": self.uploaded_bytes,
            "total_bytes": self.total_bytes,
            "progress_percent": round(self.progress_percent, 2),
            "status": self.status,
            "elapsed_time": time.time() - self.start_time,
            "speed_mbps": self.calculate_speed()
        }
        
        # Remove disconnected clients
        disconnected = set()
        for client in self.websocket_clients:
            try:
                asyncio.create_task(client.send(json.dumps(progress_data)))
            except:
                disconnected.add(client)
        
        for client in disconnected:
            self.websocket_clients.discard(client)
    
    def calculate_speed(self) -> float:
        """Calculate upload speed in MB/s"""
        elapsed = time.time() - self.start_time
        if elapsed > 0:
            return (self.uploaded_bytes / (1024 * 1024)) / elapsed
        return 0.0
    
    def add_client(self, websocket):
        """Add WebSocket client for progress updates"""
        self.websocket_clients.add(websocket)
    
    def remove_client(self, websocket):
        """Remove WebSocket client"""
        self.websocket_clients.discard(websocket)


class TelegramVideoBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"""
    
    def __init__(self):
        self.yandex_disk = None
        if YANDEX_DISK_TOKEN:
            self.yandex_disk = yadisk.YaDisk(token=YANDEX_DISK_TOKEN)
        
        # WebSocket upload tracking
        self.upload_progress = {}  # user_id -> WebSocketUploadProgress
        self.websocket_server = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–ø–∫–∏ –Ω–∞ Yandex Disk
        self.init_yandex_folders()
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.temp_dir = Path("temp_videos")
        self.temp_dir.mkdir(exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_dir = Path("telegram_results")
        self.results_dir.mkdir(exist_ok=True)
    
    def init_yandex_folders(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–ø–æ–∫ –Ω–∞ Yandex Disk"""
        try:
            if not self.yandex_disk:
                return
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –ø–∞–ø–∫—É
            base_folder = "–ú–µ–¥–∏–∞–±–∞–Ω–∫/–ö–æ–º–∞–Ω–¥–∞ 1"
            if not self.yandex_disk.exists(base_folder):
                self.yandex_disk.mkdir(base_folder)
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞: {base_folder}")
            
            logger.info("–ü–∞–ø–∫–∏ Yandex Disk –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞–ø–æ–∫ Yandex Disk: {e}")
    
    async def create_yandex_folders(self, blogger_name, folder_name):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –¥–ª—è –±–ª–æ–≥–µ—Ä–∞ –Ω–∞ Yandex Disk"""
        try:
            if not self.yandex_disk:
                logger.warning("Yandex Disk –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                return
            
            base_folder = "–ú–µ–¥–∏–∞–±–∞–Ω–∫/–ö–æ–º–∞–Ω–¥–∞ 1"
            blogger_folder = f"{base_folder}/{blogger_name}"
            content_folder = f"{blogger_folder}/{folder_name}"
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –±–ª–æ–≥–µ—Ä–∞, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not self.yandex_disk.exists(blogger_folder):
                self.yandex_disk.mkdir(blogger_folder)
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –±–ª–æ–≥–µ—Ä–∞: {blogger_folder}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not self.yandex_disk.exists(content_folder):
                self.yandex_disk.mkdir(content_folder)
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_folder}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ approved –∏ not_approved
            for status in ["approved", "not_approved"]:
                status_folder = f"{content_folder}/{status}"
                if not self.yandex_disk.exists(status_folder):
                    self.yandex_disk.mkdir(status_folder)
                    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ {status}: {status_folder}")
            
            logger.info(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {blogger_name}/{folder_name}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫ –¥–ª—è {blogger_name}/{folder_name}: {e}")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = update.effective_user.id
        
        welcome_text = """
üé¨ *–ë–æ—Ç —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–µ–æ*

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª, –∏ —è —Å–æ–∑–¥–∞–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ Instagram!

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–º–æ—â—å
/filters - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
/status - –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏

*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª
2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ (1, 3, 5, 10)
3. –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —Ñ–∏–ª—å—Ç—Ä–æ–≤ (—Ä–∞–∑–Ω—ã–µ —Å–∫–æ—Ä–æ—Å—Ç–∏)
4. –ü–æ–ª—É—á–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ —Å —Ä–∞–∑–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
5. –ö–∞–∂–¥–æ–µ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID –¥–ª—è –∞–ø–ø—Ä—É–≤–∞
        """
        
        await update.message.reply_text(
            welcome_text, 
            parse_mode='Markdown'
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
üÜò *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

*–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:*
‚Ä¢ MP4, AVI, MOV, MKV

*–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä:*
‚Ä¢ {max_size} MB

*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:*
‚Ä¢ üì∏ –í–∏–Ω—Ç–∞–∂–Ω—ã–π - —Ç–µ–ø–ª—ã–µ —Ç–æ–Ω–∞
‚Ä¢ üé≠ –î—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∏–π - –≤—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç  
‚Ä¢ üå∏ –ú—è–≥–∫–∏–π - —Ä–∞–∑–º—ã—Ç–∏–µ –∏ —è—Ä–∫–æ—Å—Ç—å
‚Ä¢ üåà –Ø—Ä–∫–∏–π - —É—Å–∏–ª–µ–Ω–Ω–∞—è –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å
‚Ä¢ ‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–π - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
‚Ä¢ üé® –í–∏–∑—É–∞–ª—å–Ω—ã–π - —Ü–≤–µ—Ç–æ–≤—ã–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
‚Ä¢ ‚ú® –í—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã - –∫–æ–º–±–∏–Ω–∞—Ü–∏—è

*–ü—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏:*
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ
2. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä
3. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
4. –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ –∞–ø–ø—Ä—É–≤
5. –ú–µ–Ω–µ–¥–∂–µ—Ä –æ–¥–æ–±—Ä—è–µ—Ç/–æ—Ç–∫–ª–æ–Ω—è–µ—Ç
6. –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ —á–∞—Ç–±–æ—Ç

*–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:*
‚Ä¢ /manager - –ø–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
‚Ä¢ /queue - –æ—á–µ—Ä–µ–¥—å –Ω–∞ –∞–ø–ø—Ä—É–≤
‚Ä¢ /approved - –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
‚Ä¢ /approve <ID> - –æ–¥–æ–±—Ä–∏—Ç—å –≤–∏–¥–µ–æ
‚Ä¢ /reject <ID> - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –≤–∏–¥–µ–æ
‚Ä¢ /send_to_chatbot <ID> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç–±–æ—Ç
        """.format(max_size=MAX_VIDEO_SIZE_MB)
        
        await update.message.reply_text(
            help_text,
            parse_mode='Markdown'
        )
    
    async def filters_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /filters - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã"""
        filters_text = "üé® *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã Instagram:*\n\n"
        
        for filter_id, filter_info in INSTAGRAM_FILTERS.items():
            filters_text += f"*{filter_info['name']}*\n"
            filters_text += f"_{filter_info['description']}_\n\n"
        
        await update.message.reply_text(
            filters_text,
            parse_mode='Markdown'
        )
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å"""
        user_id = update.effective_user.id
        
        if user_id in user_states:
            state = user_states[user_id]
            status_text = f"""
üìä *–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏:*

üîÑ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π —Ñ–∞–π–ª: {state.get('filename', '–ù–µ—Ç')}
üé® –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä: {state.get('filter', '–ù–µ –≤—ã–±—Ä–∞–Ω')}
‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {state.get('start_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
            """
        else:
            status_text = "üìä *–°—Ç–∞—Ç—É—Å:* –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
        
        await update.message.reply_text(
            status_text,
            parse_mode='Markdown'
        )
    
    async def manager_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /manager - –ø–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ø–∏—Å–æ–∫ ID)
        manager_ids = [user_id]  # –î–æ–±–∞–≤—å—Ç–µ ID –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        
        if user_id not in manager_ids:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")
            return
        
        manager_text = """
üë®‚Äçüíº *–ü–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞*

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/queue - –ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –Ω–∞ –∞–ø–ø—Ä—É–≤
/approved - –ü–æ–∫–∞–∑–∞—Ç—å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
/approve <ID> - –û–¥–æ–±—Ä–∏—Ç—å –≤–∏–¥–µ–æ
/reject <ID> - –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤–∏–¥–µ–æ
/send_to_chatbot <ID> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç–±–æ—Ç

*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
üìä –û–∂–∏–¥–∞—é—Ç –∞–ø–ø—Ä—É–≤–∞: {pending_count}
‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {approved_count}
‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {rejected_count}
        """.format(
            pending_count=len(pending_approvals),
            approved_count=len([v for v in pending_approvals.values() if v.get('status') == 'approved']),
            rejected_count=len([v for v in pending_approvals.values() if v.get('status') == 'rejected'])
        )
        
        await update.message.reply_text(
            manager_text,
            parse_mode='Markdown'
        )
    
    async def queue_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /queue - –ø–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –Ω–∞ –∞–ø–ø—Ä—É–≤"""
        user_id = update.effective_user.id
        
        if not pending_approvals:
            await update.message.reply_text("üìã *–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞*", parse_mode='Markdown')
            return
        
        queue_text = "üìã *–û—á–µ—Ä–µ–¥—å –Ω–∞ –∞–ø–ø—Ä—É–≤:*\n\n"
        
        for approval_id, video_data in pending_approvals.items():
            if video_data.get('status') == 'pending':
                queue_text += f"üÜî *ID:* {approval_id}\n"
                queue_text += f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {video_data.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                queue_text += f"üìÅ *–§–∞–π–ª:* {video_data.get('filename', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                queue_text += f"üé® *–§–∏–ª—å—Ç—Ä:* {video_data.get('filter', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                queue_text += f"‚è∞ *–í—Ä–µ–º—è:* {video_data.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        
        await update.message.reply_text(queue_text, parse_mode='Markdown')
    
    async def approve_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /approve - –æ–¥–æ–±—Ä–∏—Ç—å –≤–∏–¥–µ–æ"""
        user_id = update.effective_user.id
        
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –≤–∏–¥–µ–æ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä: /approve abc123")
            return
        
        approval_id = context.args[0]
        
        if approval_id not in pending_approvals:
            await update.message.reply_text("‚ùå –í–∏–¥–µ–æ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        video_data = pending_approvals[approval_id]
        video_data['status'] = 'approved'
        video_data['approved_by'] = user_id
        video_data['approved_at'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É approved
        try:
            await self.move_to_approved_folder(video_data, approval_id)
            await update.message.reply_text(f"‚úÖ –í–∏–¥–µ–æ {approval_id} –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ –ø–∞–ø–∫—É approved!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤ approved –ø–∞–ø–∫—É: {e}")
            await update.message.reply_text(f"‚úÖ –í–∏–¥–µ–æ {approval_id} –æ–¥–æ–±—Ä–µ–Ω–æ, –Ω–æ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏: {str(e)}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await context.bot.send_message(
            chat_id=video_data['user_id'],
            text=f"‚úÖ –í–∞—à–µ –≤–∏–¥–µ–æ –æ–¥–æ–±—Ä–µ–Ω–æ!\nüÜî ID: {approval_id}\nüë®‚Äçüíº –û–¥–æ–±—Ä–∏–ª: {update.effective_user.first_name}"
        )
    
    async def approved_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /approved - –ø–æ–∫–∞–∑–∞—Ç—å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ"""
        user_id = update.effective_user.id
        
        approved_videos = [v for v in pending_approvals.values() if v.get('status') == 'approved']
        
        if not approved_videos:
            await update.message.reply_text("üìã *–ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ*", parse_mode='Markdown')
            return
        
        approved_text = "‚úÖ *–û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ:*\n\n"
        
        for video_data in approved_videos:
            approved_text += f"üÜî *ID:* {video_data.get('approval_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            approved_text += f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {video_data.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            approved_text += f"üìÅ *–§–∞–π–ª:* {video_data.get('filename', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            approved_text += f"üé® *–§–∏–ª—å—Ç—Ä:* {video_data.get('filter', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            approved_text += f"‚è∞ *–û–¥–æ–±—Ä–µ–Ω–æ:* {video_data.get('approved_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            approved_text += f"üë®‚Äçüíº *–û–¥–æ–±—Ä–∏–ª:* {video_data.get('approved_by', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        
        await update.message.reply_text(approved_text, parse_mode='Markdown')
    
    async def reject_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /reject - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –≤–∏–¥–µ–æ"""
        user_id = update.effective_user.id
        
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –≤–∏–¥–µ–æ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä: /reject abc123")
            return
        
        approval_id = context.args[0]
        
        if approval_id not in pending_approvals:
            await update.message.reply_text("‚ùå –í–∏–¥–µ–æ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        video_data = pending_approvals[approval_id]
        video_data['status'] = 'rejected'
        video_data['rejected_by'] = user_id
        video_data['rejected_at'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await context.bot.send_message(
            chat_id=video_data['user_id'],
            text=f"‚ùå –í–∞—à–µ –≤–∏–¥–µ–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.\nüÜî ID: {approval_id}\nüë®‚Äçüíº –û—Ç–∫–ª–æ–Ω–∏–ª: {update.effective_user.first_name}"
        )
        
        await update.message.reply_text(f"‚ùå –í–∏–¥–µ–æ {approval_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!")
    
    async def send_to_chatbot_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /send_to_chatbot - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –≤ —á–∞—Ç–±–æ—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
        user_id = update.effective_user.id
        
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –≤–∏–¥–µ–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç–±–æ—Ç.\n–ü—Ä–∏–º–µ—Ä: /send_to_chatbot abc123")
            return
        
        approval_id = context.args[0]
        
        if approval_id not in pending_approvals:
            await update.message.reply_text("‚ùå –í–∏–¥–µ–æ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        video_data = pending_approvals[approval_id]
        
        if video_data['status'] != 'approved':
            await update.message.reply_text("‚ùå –í–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–æ–±—Ä–µ–Ω–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ —á–∞—Ç–±–æ—Ç.")
            return
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        manager_states[user_id] = {
            'status': 'waiting_metadata',
            'approval_id': approval_id,
            'video_data': video_data
        }
        
        await update.message.reply_text(
            f"üìù –í–≤–µ–¥–∏—Ç–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–¥–µ–æ {approval_id}:\n\n"
            f"1. –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (YYYY-MM-DD HH:MM):\n"
            f"2. ID —Å—Ü–µ–Ω–∞—Ä–∏—è:\n"
            f"3. –û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ:\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            f"<–¥–∞—Ç–∞>|<ID —Å—Ü–µ–Ω–∞—Ä–∏—è>|<–æ–ø–∏—Å–∞–Ω–∏–µ>"
        )
    
    async def handle_user_metadata(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID —Ä–æ–ª–∏–∫–∞, –∏–º—è –±–ª–æ–≥–µ—Ä–∞ –∏ –ø–∞–ø–∫–∏)"""
        user_id = update.effective_user.id
        
        if user_id not in user_states:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ.")
            return
        
        text = update.message.text.strip()
        
        # –ï—Å–ª–∏ –µ—â–µ –Ω–µ –≤–≤–µ–ª–∏ ID —Ä–æ–ª–∏–∫–∞
        if user_states[user_id]['video_id'] is None:
            user_states[user_id]['video_id'] = text
            await update.message.reply_text(
                f"‚úÖ ID —Ä–æ–ª–∏–∫–∞: **{text}**\n\n"
                "üë§ **–í–≤–µ–¥–∏—Ç–µ –∏–º—è –±–ª–æ–≥–µ—Ä–∞:**\n"
                "(–Ω–∞–ø—Ä–∏–º–µ—Ä: –ù–∏–Ω–∞, –†—ç–π—á–µ–ª, –∏–ª–∏ –Ω–æ–≤–æ–µ –∏–º—è)"
            )
            return
        
        # –ï—Å–ª–∏ –µ—â–µ –Ω–µ –≤–≤–µ–ª–∏ –∏–º—è –±–ª–æ–≥–µ—Ä–∞
        if user_states[user_id]['blogger_name'] is None:
            user_states[user_id]['blogger_name'] = text
            await update.message.reply_text(
                f"‚úÖ –ò–º—è –±–ª–æ–≥–µ—Ä–∞: **{text}**\n\n"
                "üìÅ **–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏:**\n"
                "(–Ω–∞–ø—Ä–∏–º–µ—Ä: clips, videos, content)"
            )
            return
        
        # –ï—Å–ª–∏ –µ—â–µ –Ω–µ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
        if user_states[user_id]['folder_name'] is None:
            user_states[user_id]['folder_name'] = text
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –Ω–∞ Yandex Disk
            await self.create_yandex_folders(user_states[user_id]['blogger_name'], text)
            
            await update.message.reply_text(
                f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n"
                f"üÜî ID —Ä–æ–ª–∏–∫–∞: **{user_states[user_id]['video_id']}**\n"
                f"üë§ –ë–ª–æ–≥–µ—Ä: **{user_states[user_id]['blogger_name']}**\n"
                f"üìÅ –ü–∞–ø–∫–∞: **{text}**\n"
                f"üìÇ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ –Ω–∞ Yandex Disk\n\n"
                "üé¨ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ
            keyboard = []
            for n in [1, 3, 5, 10]:
                keyboard.append([
                    InlineKeyboardButton(
                        f"üé¨ {n} –≤–∏–¥–µ–æ", 
                        callback_data=f"count_{n}"
                    )
                ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "üé¨ –°–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞—Ç—å?",
                reply_markup=reply_markup
            )

    async def handle_metadata(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        user_id = update.effective_user.id
        
        if user_id not in manager_states:
            return
        
        if manager_states[user_id]['status'] != 'waiting_metadata':
            return
        
        try:
            # –ü–∞—Ä—Å–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata_text = update.message.text
            parts = metadata_text.split('|')
            
            if len(parts) != 3:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    "<–¥–∞—Ç–∞>|<ID —Å—Ü–µ–Ω–∞—Ä–∏—è>|<–æ–ø–∏—Å–∞–Ω–∏–µ>"
                )
                return
            
            publish_date, scenario_id, description = [part.strip() for part in parts]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            approval_id = manager_states[user_id]['approval_id']
            video_data = pending_approvals[approval_id]
            
            video_data['metadata'] = {
                'publish_date': publish_date,
                'scenario_id': scenario_id,
                'description': description,
                'sent_to_chatbot': True,
                'sent_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç–±–æ—Ç (—Å–∏–º—É–ª—è—Ü–∏—è)
            await self.send_to_chatbot(video_data, context)
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É approved
            await self.move_to_approved_folder(video_data, approval_id)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            del manager_states[user_id]
            
            await update.message.reply_text(
                f"‚úÖ –í–∏–¥–µ–æ {approval_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç–±–æ—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏:\n"
                f"üìÖ –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {publish_date}\n"
                f"üÜî ID —Å—Ü–µ–Ω–∞—Ä–∏—è: {scenario_id}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}"
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    
    async def send_to_chatbot(self, video_data, context):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –≤ —á–∞—Ç–±–æ—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç–±–æ—Ç
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç–±–æ—Ç: {video_data}")
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤ –∫ —á–∞—Ç–±–æ—Ç—É
            # —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –≤–∏–¥–µ–æ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç–±–æ—Ç: {e}")
    
    async def move_to_approved_folder(self, video_data, approval_id):
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫—É approved"""
        try:
            if not self.yandex_disk:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–≥–µ—Ä–µ –∏ –ø–∞–ø–∫–µ
            blogger_name = video_data.get('blogger_name', 'unknown')
            folder_name = video_data.get('folder_name', 'default')
            
            # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ approved
            base_folder = "–ú–µ–¥–∏–∞–±–∞–Ω–∫/–ö–æ–º–∞–Ω–¥–∞ 1"
            blogger_folder = f"{base_folder}/{blogger_name}"
            content_folder = f"{blogger_folder}/{folder_name}"
            approved_folder = f"{content_folder}/approved"
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É approved, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not self.yandex_disk.exists(approved_folder):
                self.yandex_disk.mkdir(approved_folder)
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ approved: {approved_folder}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ
            video_folder = f"{approved_folder}/{approval_id}"
            if not self.yandex_disk.exists(video_folder):
                self.yandex_disk.mkdir(video_folder)
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –≤–∏–¥–µ–æ: {video_folder}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞ Yandex Disk
            source_remote_path = video_data.get('yandex_remote_path')
            logger.info(f"Yandex –ø—É—Ç—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö: {source_remote_path}")
            
            # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º —Ñ–∞–π–ª –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø–∞–ø–æ–∫
            if not source_remote_path:
                # –ò—â–µ–º –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: –ú–µ–¥–∏–∞–±–∞–Ω–∫/–ö–æ–º–∞–Ω–¥–∞ 1/–ú–∞—è/videos/run_timestamp/
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–≥–µ—Ä–µ –∏ –ø–∞–ø–∫–µ
                    blogger_name = video_data.get('blogger_name', 'unknown')
                    folder_name = video_data.get('folder_name', 'default')
                    
                    # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    content_folder = f"{base_folder}/{blogger_name}/{folder_name}"
                    
                    if self.yandex_disk.exists(content_folder):
                        content_contents = list(self.yandex_disk.listdir(content_folder))
                        for run_folder in content_contents:
                            if run_folder['type'] == 'dir' and run_folder['name'].startswith('run_'):
                                run_path = f"{content_folder}/{run_folder['name']}"
                                run_contents = list(self.yandex_disk.listdir(run_path))
                                for file_item in run_contents:
                                    if file_item['name'].endswith('.mp4'):
                                        source_remote_path = f"{run_path}/{file_item['name']}"
                                        logger.info(f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: {source_remote_path}")
                                        break
                                if source_remote_path:
                                    break
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–∞ –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: {e}")
                    source_remote_path = None
            
            if source_remote_path:
                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª —Å Yandex Disk
                approved_path = f"{video_folder}/video.mp4"
                try:
                    # –°–Ω–∞—á–∞–ª–∞ –∫–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
                    self.yandex_disk.copy(source_remote_path, approved_path)
                    logger.info(f"–§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Å {source_remote_path} –≤ {approved_path}")
                    
                    # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
                    self.yandex_disk.remove(source_remote_path)
                    logger.info(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {source_remote_path}")
                    
                except Exception as move_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {move_error}")
                    # Fallback - –∑–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                    source_path = video_data.get('video_path')
                    if source_path and os.path.exists(source_path):
                        self.yandex_disk.upload(source_path, approved_path)
                        logger.info(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ: {source_path}")
                    else:
                        logger.error("–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è fallback")
                        return False
            else:
                # Fallback - –∑–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                source_path = video_data.get('video_path')
                logger.info(f"–õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö: {source_path}")
                if source_path and os.path.exists(source_path):
                    approved_path = f"{video_folder}/video.mp4"
                    self.yandex_disk.upload(source_path, approved_path)
                    logger.info(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ: {source_path}")
                else:
                    logger.error(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {source_path}")
                    logger.error(f"–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(source_path) if source_path else 'source_path is None'}")
                    return False
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            metadata_content = f"""
ID: {approval_id}
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {video_data.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
–§–∏–ª—å—Ç—Ä: {video_data.get('filter', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {video_data.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
–ë–ª–æ–≥–µ—Ä: {video_data.get('blogger_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
–ü–∞–ø–∫–∞: {video_data.get('folder_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
ID —Ä–æ–ª–∏–∫–∞: {video_data.get('video_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
            """.strip()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if 'metadata' in video_data:
                metadata_content += f"""
–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {video_data['metadata']['publish_date']}
ID —Å—Ü–µ–Ω–∞—Ä–∏—è: {video_data['metadata']['scenario_id']}
–û–ø–∏—Å–∞–Ω–∏–µ: {video_data['metadata']['description']}
–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç–±–æ—Ç: {video_data['metadata']['sent_at']}
                """.strip()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            metadata_path = f"{video_folder}/metadata.txt"
            with open("temp_metadata.txt", "w", encoding="utf-8") as f:
                f.write(metadata_content)
            
            self.yandex_disk.upload("temp_metadata.txt", metadata_path)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove("temp_metadata.txt")
            
            # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            try:
                if source_path and os.path.exists(source_path):
                    os.remove(source_path)
                    logger.info(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {source_path}")
            except Exception as delete_error:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {delete_error}")
            
            logger.info(f"–í–∏–¥–µ–æ {approval_id} –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ approved –ø–∞–ø–∫—É")
            logger.info(f"–§–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å: {approved_path}")
            logger.info(f"–ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞: {video_data.get('yandex_public_url', '–ù–µ —Å–æ–∑–¥–∞–Ω–∞')}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤ approved –ø–∞–ø–∫—É: {e}")
            return False
    
    async def handle_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –≤–∏–¥–µ–æ
        video = update.message.video
        document = update.message.document
        
        if not video and not document:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ–º –ª–∏ –º—ã —Å–∂–∞—Ç–æ–µ –≤–∏–¥–µ–æ
        if user_id in user_states and user_states[user_id].get('status') == 'waiting_for_compressed_video':
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–∂–∞—Ç–æ–µ –≤–∏–¥–µ–æ
            await update.message.reply_text(
                f"‚úÖ **–°–∂–∞—Ç–æ–µ –≤–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ!**\n\n"
                f"üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞–∑–º–µ—Ä –∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É..."
            )
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
            user_states[user_id]['status'] = 'video_received'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏ –∏–º—è
        file_size_mb = 0
        file_name = "video.mp4"
        
        if video:
            file_size_mb = video.file_size / (1024 * 1024) if video.file_size else 0
            file_name = video.file_name or "video.mp4"
            logger.info(f"üìπ Video file: {file_name}, size: {video.file_size} bytes ({file_size_mb:.1f} MB)")
        elif document:
            file_size_mb = document.file_size / (1024 * 1024) if document.file_size else 0
            file_name = document.file_name or "video.mp4"
            logger.info(f"üìÑ Document file: {file_name}, size: {document.file_size} bytes ({file_size_mb:.1f} MB), mime: {document.mime_type}")
        
        # Debug: sprawdzamy czy rozmiar jest prawid≈Çowy
        if file_size_mb == 0:
            logger.warning(f"‚ö†Ô∏è File size is 0 or unknown for {file_name}")
            # Dla plik√≥w .MOV mo≈ºe byƒá problem z rozpoznaniem rozmiaru
            if file_name.lower().endswith('.mov'):
                logger.info("üé¨ .MOV file detected, allowing processing despite unknown size")
                file_size_mb = 25  # Ustawiamy bezpieczny rozmiar dla .MOV
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å fallbackami
        # Telegram API ma r√≥≈ºne limity dla r√≥≈ºnych typ√≥w plik√≥w
        # Dla video limit mo≈ºe byƒá ni≈ºszy ni≈º 50MB
        if USE_SELF_HOSTED_API:
            # Self-hosted Bot API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –¥–æ 2GB
            telegram_video_limit = MAX_FILE_SIZE_MB  # 2GB
            telegram_document_limit = MAX_FILE_SIZE_MB  # 2GB
            logger.info(f"üöÄ Self-hosted Bot API enabled - max file size: {MAX_FILE_SIZE_MB}MB")
        else:
            # Railway deployment - u≈ºywamy 2GB limit
            telegram_video_limit = 2000  # MB - Railway limit 2GB
            logger.info("üì± Using Railway deployment - 2GB file size limit")
        telegram_document_limit = 2000  # MB - Railway limit dla dokument√≥w
        
        if file_size_mb > telegram_video_limit and (video or file_name.lower().endswith(('.mp4', '.mov', '.avi'))):
            # Dla video plik√≥w limit jest ni≈ºszy - pr√≥bujemy z kompresjƒÖ lub podzia≈Çem
            if file_size_mb <= telegram_video_limit * 3:  # Do 60MB pr√≥bujemy skompresowaƒá
                logger.info(f"üé¨ Video file {file_size_mb:.1f} MB - attempting compression")
                await update.message.reply_text(
                    f"‚ö†Ô∏è **–í–∏–¥–µ–æ –±–æ–ª—å—à–æ–µ –¥–ª—è Telegram API** ({file_size_mb:.1f} MB)\n"
                    f"üîÑ –ü–æ–ø—Ä–æ–±—É–µ–º —Å–∂–∞—Ç—å –¥–æ < {telegram_video_limit}MB..."
                )
            else:
                # Dla bardzo du≈ºych plik√≥w - podzia≈Ç na czƒô≈õci
                await update.message.reply_text(
                    f"üìπ **–û—á–µ–Ω—å –±–æ–ª—å—à–æ–µ –≤–∏–¥–µ–æ** ({file_size_mb:.1f} MB)\n\n"
                    f"üí° **Telegram limit: {telegram_video_limit}MB**\n\n"
                    f"üîÑ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ:**\n"
                    f"‚Ä¢ –†–∞–∑–¥–µ–ª—é –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 30 —Å–µ–∫—É–Ω–¥\n"
                    f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞—é –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ\n"
                    f"‚Ä¢ –°–æ–µ–¥–∏–Ω—é –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ\n\n"
                    f"‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É..."
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω—É–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å
                user_states[user_id]['needs_splitting'] = True
                user_states[user_id]['original_size'] = file_size_mb
        elif file_size_mb > telegram_document_limit and document and not file_name.lower().endswith(('.mp4', '.mov', '.avi')):
            # Dla dokument√≥w limit jest wy≈ºszy
            await update.message.reply_text(
                f"‚ùå **–î–æ–∫—É–º–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è Telegram API!**\n\n"
                f"üìÅ –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} MB\n"
                f"üìÅ –ò–º—è: {file_name}\n\n"
                f"üí° **Telegram document limit: {telegram_document_limit}MB**\n\n"
                f"üîÑ **–†–µ—à–µ–Ω–∏—è:**\n"
                f"‚Ä¢ –°–æ–∂–º–∏—Ç–µ —Ñ–∞–π–ª –¥–æ < {telegram_document_limit}MB\n"
                f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–Ω–ª–∞–π–Ω-—Å–∂–∞—Ç–∏–µ\n"
                f"‚Ä¢ –†–∞–∑–¥–µ–ª–∏—Ç–µ –Ω–∞ —á–∞—Å—Ç–∏\n\n"
                f"üì± –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∂–∞—Ç—ã–π —Ñ–∞–π–ª"
            )
            return
        elif file_size_mb > MAX_VIDEO_SIZE_MB:
            # Fallback 1: –ü–æ–ø—Ä–æ–±—É–µ–º —Å–∂–∞—Ç—å –≤–∏–¥–µ–æ
            if file_size_mb <= MAX_VIDEO_SIZE_MB * 2:  # –î–æ 600MB
                await update.message.reply_text(
                    f"‚ö†Ô∏è –§–∞–π–ª –±–æ–ª—å—à–æ–π ({file_size_mb:.1f} MB), –Ω–æ –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å —Å–∂–∞—Ç–∏–µ–º.\n"
                    f"üìÅ –ò–º—è —Ñ–∞–π–ª–∞: {file_name}\n"
                    f"üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É..."
                )
            else:
                await update.message.reply_text(
                    f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! ({file_size_mb:.1f} MB)\n"
                    f"üìÅ –ò–º—è —Ñ–∞–π–ª–∞: {file_name}\n"
                    f"üí° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_VIDEO_SIZE_MB} MB\n"
                    f"üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∂–∞—Ç—å –≤–∏–¥–µ–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞."
                )
                return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[user_id] = {
            'status': 'video_received',
            'filename': file_name,
            'file_id': video.file_id if video else document.file_id,
            'file_size': video.file_size if video else document.file_size,
            'start_time': datetime.now().strftime('%H:%M:%S'),
            'blogger_name': None,
            'folder_name': None,
            'video_id': None
        }
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID —Ä–æ–ª–∏–∫–∞
        await update.message.reply_text(
            f"‚úÖ –í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ! ({file_size_mb:.1f} MB)\n\n"
            "üÜî **–í–≤–µ–¥–∏—Ç–µ ID —Ä–æ–ª–∏–∫–∞:**\n"
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä: 001, 002, 123, –∏–ª–∏ –ª—é–±–æ–µ —á–∏—Å–ª–æ)"
        )
    
    async def handle_count_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        if user_id not in user_states:
            await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∑–∞–Ω–æ–≤–æ.")
            return
        
        if not query.data.startswith('count_'):
            return
        
        count = int(query.data.replace('count_', ''))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ
        user_states[user_id]['video_count'] = count
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ
        keyboard = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —Ç–∏–ø–∞–º
        filter_groups = {
            'vintage': ['vintage_slow', 'vintage_normal', 'vintage_fast'],
            'dramatic': ['dramatic_slow', 'dramatic_normal', 'dramatic_fast'],
            'soft': ['soft_slow', 'soft_normal', 'soft_fast'],
            'vibrant': ['vibrant_slow', 'vibrant_normal', 'vibrant_fast']
        }
        
        for group_name, filter_ids in filter_groups.items():
            keyboard.append([
                InlineKeyboardButton(
                    f"üé® {group_name.title()} (—Ä–∞–∑–Ω—ã–µ —Å–∫–æ—Ä–æ—Å—Ç–∏)", 
                    callback_data=f"group_{group_name}"
                )
            ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üé¨ –°–æ–∑–¥–∞—é {count} –≤–∏–¥–µ–æ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ —Å–∫–æ—Ä–æ—Å—Ç—è–º–∏\n\n"
            "üé® –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —Ñ–∏–ª—å—Ç—Ä–æ–≤:",
            reply_markup=reply_markup
        )
    
    async def handle_group_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        if user_id not in user_states:
            await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∑–∞–Ω–æ–≤–æ.")
            return
        
        if not query.data.startswith('group_'):
            return
        
        group_name = query.data.replace('group_', '')
        video_count = user_states[user_id].get('video_count', 1)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —Ç–∏–ø–∞–º
        filter_groups = {
            'vintage': ['vintage_slow', 'vintage_normal', 'vintage_fast'],
            'dramatic': ['dramatic_slow', 'dramatic_normal', 'dramatic_fast'],
            'soft': ['soft_slow', 'soft_normal', 'soft_fast'],
            'vibrant': ['vibrant_slow', 'vibrant_normal', 'vibrant_fast']
        }
        
        if group_name not in filter_groups:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤.")
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ
        available_filters = filter_groups[group_name]
        selected_filters = []
        
        for i in range(video_count):
            filter_id = available_filters[i % len(available_filters)]
            selected_filters.append(filter_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        user_states[user_id]['selected_filters'] = selected_filters
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states[user_id].update({
            'status': 'processing',
            'filter_group': group_name
        })
        
        await query.edit_message_text(
            f"üé¨ –°–æ–∑–¥–∞—é {video_count} –≤–∏–¥–µ–æ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ {group_name}...\n"
            f"üé® –§–∏–ª—å—Ç—Ä—ã: {', '.join([INSTAGRAM_FILTERS[f]['name'] for f in selected_filters])}\n"
            "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç..."
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(
            self.process_multiple_videos_parallel(user_id, query, selected_filters, context)
        )
    
    async def process_multiple_videos_parallel(self, user_id: int, query, selected_filters: list, context):
        """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∏–¥–µ–æ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await query.edit_message_text(
                "üîÑ **–ù–ê–ß–ò–ù–ê–Æ –û–ë–†–ê–ë–û–¢–ö–£ –í–ò–î–ï–û**\n\n"
                "üìÅ –§–∞–π–ª –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–ø–∫–µ:\n"
                f"`{self.results_dir}/batch_[ID]`\n\n"
                "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ü–ï–†–ï–î –ø–æ–ø—ã—Ç–∫–æ–π get_file()
            file_size_mb = user_states[user_id]['file_size'] / (1024 * 1024)
            logger.info(f"üì• –ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {user_states[user_id]['filename']}, —Ä–∞–∑–º–µ—Ä: {file_size_mb:.1f} MB")
            
            # Railway deployment - u≈ºywamy 2GB limit zamiast 20MB
            railway_limit_mb = 2000  # 2GB limit na Railway
            logger.info(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_mb:.1f} MB, –ª–∏–º–∏—Ç Railway: {railway_limit_mb} MB")
            if file_size_mb > railway_limit_mb:  # Je≈õli —Ñ–∞–π–ª –±–æ–ª—å—à–µ 2GB, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∂–∏–º–∞–µ–º
                logger.info(f"üö® –§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç Railway –ª–∏–º–∏—Ç! –ù–∞—á–∏–Ω–∞—é –∫–æ–º–ø—Ä–µ—Å—Å–∏—é...")
                await query.message.edit_text(
                    f"üì¶ **–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ö–û–ú–ü–†–ï–°–°–ò–Ø**\n\n"
                    f"üìÅ –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} MB\n"
                    f"üìÅ –ò–º—è: {user_states[user_id]['filename']}\n\n"
                    f"üîÑ –°–∂–∏–º–∞—é –¥–æ < {railway_limit_mb}MB...\n"
                    f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏ (Telegram API –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã >20MB)
                await query.message.edit_text(
                    f"üì¶ **–ö–û–ú–ü–†–ï–°–°–ò–Ø –¢–†–ï–ë–£–ï–¢–°–Ø**\n\n"
                    f"üìÅ –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} MB\n"
                    f"üìÅ –ò–º—è: {user_states[user_id]['filename']}\n\n"
                    f"üí° **Telegram API limit: 20MB**\n"
                    f"üö´ **–ù–µ –º–æ–≥—É —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏**\n\n"
                    f"üîÑ **–ë—ã—Å—Ç—Ä—ã–µ —Ä–µ—à–µ–Ω–∏—è:**\n\n"
                    f"üì± **–ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:**\n"
                    f"‚Ä¢ Video Compressor (Android)\n"
                    f"‚Ä¢ Video Compress (iOS)\n"
                    f"‚Ä¢ InShot (Android/iOS)\n\n"
                    f"üíª **–û–Ω–ª–∞–π–Ω-—Å–∂–∞—Ç–∏–µ:**\n"
                    f"‚Ä¢ https://www.freeconvert.com/video-compressor\n"
                    f"‚Ä¢ https://www.clideo.com/compress-video\n"
                    f"‚Ä¢ https://www.kapwing.com/tools/compress-video\n\n"
                    f"‚ö° **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
                    f"‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: 720p –∏–ª–∏ –Ω–∏–∂–µ\n"
                    f"‚Ä¢ –ë–∏—Ç—Ä–µ–π—Ç: 1-2 Mbps\n"
                    f"‚Ä¢ –†–∞–∑–º–µ—Ä: < 20MB\n\n"
                    f"‚è≥ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∂–∞—Ç–æ–µ –≤–∏–¥–µ–æ –±–æ—Ç—É..."
                )
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∂–¥–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                user_states[user_id]['status'] = 'waiting_for_compressed_video'
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ context —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä OK
            try:
                logger.info(f"üì• Pobieranie pliku: {user_states[user_id]['filename']}, rozmiar: {user_states[user_id]['file_size']} bytes")
                file = await context.bot.get_file(user_states[user_id]['file_id'])
                logger.info(f"‚úÖ Plik pobrany pomy≈õlnie: {file.file_path}")
            except Exception as e:
                logger.error(f"‚ùå B≈ÇƒÖd pobierania pliku: {e}")
                if "File is too big" in str(e):
                    file_size_mb = user_states[user_id]['file_size'] / (1024*1024)
                    await query.message.edit_text(
                        f"‚ö†Ô∏è **–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ Telegram API!**\n\n"
                        f"üìÅ –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} MB\n"
                        f"üìÅ –ò–º—è: {user_states[user_id]['filename']}\n\n"
                        f"üí° **–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π API limit: 20MB**\n\n"
                        f"üîÑ **–†–µ—à–µ–Ω–∏—è:**\n"
                        f"‚Ä¢ **–°–æ–∂–º–∏—Ç–µ –≤–∏–¥–µ–æ** –¥–æ < 20MB –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞\n"
                        f"‚Ä¢ **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ self-hosted Bot API** (2GB limit)\n"
                        f"‚Ä¢ **–†–∞–∑–¥–µ–ª–∏—Ç–µ –Ω–∞ —á–∞—Å—Ç–∏**\n\n"
                        f"üîß **–î–ª—è Railway deployment:**\n"
                        f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ self-hosted Bot API\n"
                        f"‚Ä¢ –ò–ª–∏ —Å–æ–∂–º–∏—Ç–µ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π\n\n"
                        f"üì± **–ë—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ:**\n"
                        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∂–∞—Ç–æ–µ –≤–∏–¥–µ–æ < 20MB"
                    )
                    return
                else:
                    raise e
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            unique_id = str(uuid.uuid4())[:8]
            input_filename = f"input_{unique_id}.mp4"
            input_path = self.temp_dir / input_filename
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            await file.download_to_drive(input_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º czy plik potrzebuje podzia≈Çu
            needs_splitting = user_states[user_id].get('needs_splitting', False)
            if needs_splitting:
                await query.message.edit_text(
                    f"üìπ **–†–ê–ó–î–ï–õ–ï–ù–ò–ï –ë–û–õ–¨–®–û–ì–û –§–ê–ô–õ–ê**\n\n"
                    f"üìÅ –†–∞–∑–º–µ—Ä: {user_states[user_id].get('original_size', 0):.1f} MB\n"
                    f"üîÑ –†–∞–∑–¥–µ–ª—è—é –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 30 —Å–µ–∫—É–Ω–¥...\n\n"
                    f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
                )
                
                # –†–∞–∑–¥–µ–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏
                chunks = self.split_video_into_chunks_sync(str(input_path), chunk_duration=30)
                
                if len(chunks) > 1:
                    await query.message.edit_text(
                        f"‚úÖ **–§–ê–ô–õ –†–ê–ó–î–ï–õ–ï–ù –ù–ê {len(chunks)} –ß–ê–°–¢–ï–ô**\n\n"
                        f"üìÅ –ß–∞—Å—Ç–∏: {len(chunks)} x 30 —Å–µ–∫—É–Ω–¥\n"
                        f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å...\n\n"
                        f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
                    )
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
                    processed_chunks = []
                    for i, chunk in enumerate(chunks):
                        await query.message.edit_text(
                            f"üé¨ **–û–ë–†–ê–ë–û–¢–ö–ê –ß–ê–°–¢–ò {i+1}/{len(chunks)}**\n\n"
                            f"üìÅ –§–∞–π–ª: {os.path.basename(chunk)}\n"
                            f"üîÑ –ü—Ä–∏–º–µ–Ω—è—é —Ñ–∏–ª—å—Ç—Ä—ã...\n\n"
                            f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
                        )
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç—å
                        uniquizer = VideoUniquizer()
                        processed_chunk = uniquizer.uniquize_video(
                            input_path=chunk,
                            output_path=chunk.replace('.mp4', '_processed.mp4'),
                            effects=selected_filters[0]['effects']  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π
                        )
                        
                        if processed_chunk:
                            processed_chunks.append(processed_chunk)
                            logger.info(f"‚úÖ –ß–∞—Å—Ç—å {i+1} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {processed_chunk}")
                    
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–∏
                    final_output = str(input_path).replace('.mp4', '_merged.mp4')
                    result_path = self.merge_video_chunks_sync(processed_chunks, final_output)
                    
                    if result_path:
                        # –ó–∞–º–µ–Ω—è–µ–º input_path –Ω–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        input_path = Path(result_path)
                        logger.info(f"‚úÖ –í–∏–¥–µ–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ: {result_path}")
                        
                        await query.message.edit_text(
                            f"‚úÖ **–í–°–ï –ß–ê–°–¢–ò –û–ë–†–ê–ë–û–¢–ê–ù–´ –ò –û–ë–™–ï–î–ò–ù–ï–ù–´**\n\n"
                            f"üìÅ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {os.path.basename(result_path)}\n"
                            f"üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏...\n\n"
                            f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
                        )
                    else:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
                        input_path = Path(processed_chunks[0]) if processed_chunks else input_path
                        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —á–∞—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å")
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Ñ–∞–π–ª, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ")
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results_folder = self.results_dir / f"batch_{unique_id}"
            results_folder.mkdir(exist_ok=True)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏
            blogger_name = user_states[user_id].get('blogger_name', 'Unknown')
            folder_name = user_states[user_id].get('folder_name', 'default')
            
            await query.edit_message_text(
                f"üìÅ **–ü–ê–ü–ö–ê –°–û–ó–î–ê–ù–ê**\n\n"
                f"üë§ –ë–ª–æ–≥–µ—Ä: **{blogger_name}**\n"
                f"üìÇ –ü–∞–ø–∫–∞: **{folder_name}**\n"
                f"üìÇ –ü—É—Ç—å: `{results_folder}`\n"
                f"üé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(selected_filters)} –≤–∏–¥–µ–æ...\n\n"
                "‚è≥ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É..."
            )
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            tasks = []
            video_id = user_states[user_id].get('video_id', 'unknown')
            upload_date = datetime.now().strftime('%Y%m%d')
            
            for i, filter_id in enumerate(selected_filters):
                output_filename = f"{upload_date}_{video_id}_{i+1}.mp4"
                output_path = results_folder / output_filename
                
                task = {
                    'index': i + 1,
                    'filter_id': filter_id,
                    'input_path': str(input_path),
                    'output_path': str(output_path),
                    'filter_info': INSTAGRAM_FILTERS[filter_id],
                    'video_id': video_id,
                    'upload_date': upload_date
                }
                tasks.append(task)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            processed_videos = []
            with ThreadPoolExecutor(max_workers=min(len(tasks), 4)) as executor:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
                future_to_task = {
                    executor.submit(self.process_single_video, task): task 
                    for task in tasks
                }
                
                # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                completed = 0
                total = len(tasks)
                
                for future in concurrent.futures.as_completed(future_to_task):
                    task = future_to_task[future]
                    try:
                        result = future.result()
                        if result:
                            processed_videos.append(result)
                            completed += 1
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ Telegram —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏
                            progress = f"üé¨ **–ü–†–û–ì–†–ï–°–° –û–ë–†–ê–ë–û–¢–ö–ò**\n\n"
                            progress += f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {completed}/{total} –≤–∏–¥–µ–æ\n"
                            progress += f"üé® –§–∏–ª—å—Ç—Ä: {task['filter_info']['name']}\n"
                            progress += f"üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: `{results_folder}`\n"
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏ –µ—Å–ª–∏ –±—ã–ª–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞
                            if result.get('compressed', False):
                                progress += f"üì¶ **–ö–æ–º–ø—Ä–µ—Å—Å–∏—è:** –ü—Ä–∏–º–µ–Ω–µ–Ω–∞\n"
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –µ—Å–ª–∏ –±—ã–ª–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ
                            if result.get('split', False):
                                progress += f"üìπ **–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ:** {result.get('chunks_count', 0)} —á–∞—Å—Ç–µ–π\n"
                            
                            progress += f"\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {total - completed} –≤–∏–¥–µ–æ..."
                            
                            await query.edit_message_text(progress)
                            
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ {task['index']}: {e}")
                        completed += 1
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –æ—à–∏–±–∫–æ–π
                        progress = f"üé¨ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {completed}/{total} –≤–∏–¥–µ–æ...\n"
                        progress += f"‚ùå –û—à–∏–±–∫–∞ –≤ –≤–∏–¥–µ–æ {task['index']}: {str(e)}"
                        
                        await query.edit_message_text(progress)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await query.edit_message_text(
                f"üéâ **–û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!**\n\n"
                f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(processed_videos)}/{len(selected_filters)} –≤–∏–¥–µ–æ\n"
                f"üìÅ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ:\n"
                f"`{results_folder}`\n\n"
                f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≥–æ—Ç–æ–≤—ã–µ –≤–∏–¥–µ–æ..."
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –≤–∏–¥–µ–æ
            for video_data in processed_videos:
                try:
                    await query.message.reply_video(
                        video=open(video_data['path'], 'rb'),
                        caption=f"‚úÖ –í–∏–¥–µ–æ {video_data['index']}/{len(selected_filters)}\n"
                               f"üé® –§–∏–ª—å—Ç—Ä: {video_data['filter_name']}\n"
                               f"üìÅ –†–∞–∑–º–µ—Ä: {os.path.getsize(video_data['path']) / (1024*1024):.1f} MB\n"
                               f"üìÇ –ü—É—Ç—å: `{video_data['path']}`"
                               + (f"\n‚òÅÔ∏è Yandex Disk: {video_data['yandex_url']}" if video_data.get('yandex_url') else ""),
                        supports_streaming=True
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ {video_data['index']}: {e}")
            
            # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª, –≤—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Yandex Disk
            input_path.unlink(missing_ok=True)
            logger.info("–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω, –≤—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Yandex Disk")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            user_states[user_id]['status'] = 'completed'
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ –Ω–∞ Yandex Disk –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            for i, video_data in enumerate(processed_videos):
                logger.info(f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ {i+1} –Ω–∞ Yandex Disk: {video_data['path']}")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ Yandex Disk
                yandex_url, yandex_remote_path = await self.upload_to_yandex_disk(
                    video_data['path'], user_id, f"{video_data['filter_id']}_{i+1}"
                )
                
                if yandex_remote_path:
                    video_data['yandex_remote_path'] = yandex_remote_path
                    video_data['yandex_public_url'] = yandex_url
                    logger.info(f"‚úÖ –í–∏–¥–µ–æ {i+1} –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ Yandex Disk: {yandex_remote_path}")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ {i+1} –Ω–∞ Yandex Disk")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤–∏–¥–µ–æ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –∞–ø–ø—Ä—É–≤
            for i, video_data in enumerate(processed_videos):
                approval_id = str(uuid.uuid4())[:8]
                pending_approvals[approval_id] = {
                    'status': 'pending',
                    'user_id': user_id,
                    'user_name': query.from_user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    'filename': user_states[user_id]['filename'],
                    'filter': video_data['filter_name'],
                    'video_path': video_data['path'],
                    'yandex_remote_path': video_data.get('yandex_remote_path'),
                    'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                    'approval_id': approval_id,
                    'batch_index': i + 1,
                    'batch_total': len(selected_filters),
                    'blogger_name': user_states[user_id].get('blogger_name', 'unknown'),
                    'folder_name': user_states[user_id].get('folder_name', 'default'),
                    'video_id': user_states[user_id].get('video_id', 'unknown'),
                    'upload_date': video_data.get('upload_date', datetime.now().strftime('%Y%m%d'))
                }
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ –≤ –æ—á–µ—Ä–µ–¥—å: {approval_id}")
                logger.info(f"–õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å: {video_data['path']}")
                logger.info(f"Yandex –ø—É—Ç—å: {video_data.get('yandex_remote_path', '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω')}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            approval_ids = [pending_approvals[aid]['approval_id'] for aid in list(pending_approvals.keys())[-len(processed_videos):]]
            keyboard = []
            
            for approval_id in approval_ids:
                keyboard.append([
                    InlineKeyboardButton(
                        f"‚úÖ –û–¥–æ–±—Ä–∏—Ç—å {approval_id}", 
                        callback_data=f"quick_approve_{approval_id}"
                    ),
                    InlineKeyboardButton(
                        f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å {approval_id}", 
                        callback_data=f"quick_reject_{approval_id}"
                    )
                ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_text(
                f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(processed_videos)} –≤–∏–¥–µ–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –∞–ø–ø—Ä—É–≤!\n"
                f"üÜî ID –∞–ø–ø—Ä—É–≤–∞: {', '.join(approval_ids)}\n\n"
                f"üë§ –ë–ª–æ–≥–µ—Ä: **{user_states[user_id]['blogger_name']}**\n"
                f"üìÅ –ü–∞–ø–∫–∞: **{user_states[user_id]['folder_name']}**\n\n"
                f"‚ö° **–ë—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ:**",
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {e}")
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è "File is too big"
            if "File is too big" in str(e):
                await query.message.reply_text(
                    f"‚ùå **–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è Telegram API!**\n\n"
                    f"üìÅ –†–∞–∑–º–µ—Ä: {user_states[user_id]['file_size'] / (1024*1024):.1f} MB\n"
                    f"üí° **Telegram API limit: 50MB**\n\n"
                    f"üîÑ **–†–µ—à–µ–Ω–∏—è:**\n"
                    f"‚Ä¢ –°–æ–∂–º–∏—Ç–µ –≤–∏–¥–µ–æ –¥–æ < 50MB\n"
                    f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–Ω–ª–∞–π–Ω-—Å–∂–∞—Ç–∏–µ\n"
                    f"‚Ä¢ –†–∞–∑–¥–µ–ª–∏—Ç–µ –Ω–∞ —á–∞—Å—Ç–∏\n\n"
                    f"üì± –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∂–∞—Ç–æ–µ –≤–∏–¥–µ–æ"
                )
            else:
                await query.message.reply_text(
                    text=f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"
                )
            user_states[user_id]['status'] = 'error'
    
    def process_single_video(self, task):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            logger.info(f"üé¨ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ {task['index']} —Å —Ñ–∏–ª—å—Ç—Ä–æ–º {task['filter_info']['name']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏ —Ä–µ—à–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
            file_size_mb = os.path.getsize(task['input_path']) / (1024 * 1024)
            chunks = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            
            if file_size_mb > 50:  # –ï—Å–ª–∏ —Ñ–∞–π–ª –±–æ–ª—å—à–µ 50MB, —Ä–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                logger.info(f"üìπ –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª ({file_size_mb:.1f} MB) - —Ä–∞–∑–¥–µ–ª—è—é –Ω–∞ —á–∞—Å—Ç–∏")
                print(f"üìπ –ë–û–õ–¨–®–û–ô –§–ê–ô–õ: {file_size_mb:.1f} MB - —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏")
                
                # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 30 —Å–µ–∫—É–Ω–¥
                chunks = self.split_video_into_chunks_sync(task['input_path'], chunk_duration=30)
                
                if len(chunks) > 1:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
                    processed_chunks = []
                    for i, chunk in enumerate(chunks):
                        logger.info(f"üé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–∞—Å—Ç—å {i+1}/{len(chunks)}")
                        print(f"üé¨ –ß–ê–°–¢–¨ {i+1}/{len(chunks)}: {chunk}")
                        
                        # –°–∂–∏–º–∞–µ–º —á–∞—Å—Ç—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        compressed_chunk = self.compress_video_if_needed_sync(chunk)
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç—å
                        uniquizer = VideoUniquizer()
                        processed_chunk = uniquizer.uniquize_video(
                            input_path=compressed_chunk,
                            output_path=chunk.replace('.mp4', '_processed.mp4'),
                            effects=task['filter_info']['effects']
                        )
                        
                        if processed_chunk:
                            processed_chunks.append(processed_chunk)
                            logger.info(f"‚úÖ –ß–∞—Å—Ç—å {i+1} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {processed_chunk}")
                            print(f"‚úÖ –ß–ê–°–¢–¨ {i+1} –ì–û–¢–û–í–ê: {processed_chunk}")
                    
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–∏
                    final_output = task['output_path'].replace('.mp4', '_merged.mp4')
                    result_path = self.merge_video_chunks_sync(processed_chunks, final_output)
                    
                    if result_path:
                        logger.info(f"‚úÖ –í–∏–¥–µ–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ: {result_path}")
                        print(f"‚úÖ –í–ò–î–ï–û –û–ë–™–ï–î–ò–ù–ï–ù–û: {result_path}")
                    else:
                        result_path = processed_chunks[0] if processed_chunks else task['output_path']
                else:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
                    trimmed_input_path = self.trim_video_if_needed_sync(task['input_path'], max_duration_seconds=60)
                    compressed_input_path = self.compress_video_if_needed_sync(trimmed_input_path)
                    
                    uniquizer = VideoUniquizer()
                    result_path = uniquizer.uniquize_video(
                        input_path=compressed_input_path,
                        output_path=task['output_path'],
                        effects=task['filter_info']['effects']
                    )
            else:
                # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
                trimmed_input_path = self.trim_video_if_needed_sync(task['input_path'], max_duration_seconds=60)
                compressed_input_path = self.compress_video_if_needed_sync(trimmed_input_path)
                
                uniquizer = VideoUniquizer()
                result_path = uniquizer.uniquize_video(
                    input_path=compressed_input_path,
                    output_path=task['output_path'],
                    effects=task['filter_info']['effects']
                )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
            logger.info(f"‚úÖ –í–∏–¥–µ–æ {task['index']} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {result_path}")
            print(f"‚úÖ –í–ò–î–ï–û {task['index']} –ì–û–¢–û–í–û: {result_path}")
            
            return {
                'index': task['index'],
                'path': result_path,
                'filter_name': task['filter_info']['name'],
                'filter_id': task['filter_id'],
                'video_id': task.get('video_id', 'unknown'),
                'upload_date': datetime.now().strftime('%Y%m%d'),
                'compressed': file_size_mb > 20,  # –ï—Å–ª–∏ —Ñ–∞–π–ª –±—ã–ª –±–æ–ª—å—à–µ 20MB
                'split': file_size_mb > 50,  # –ï—Å–ª–∏ —Ñ–∞–π–ª –±—ã–ª –±–æ–ª—å—à–µ 50MB
                'chunks_count': len(chunks) if file_size_mb > 50 else 1
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ {task['index']}: {e}")
            return None
    
    async def handle_filter_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        if user_id not in user_states:
            await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∑–∞–Ω–æ–≤–æ.")
            return
        
        if not query.data.startswith('filter_'):
            return
        
        filter_id = query.data.replace('filter_', '')
        if filter_id not in INSTAGRAM_FILTERS:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä.")
            return
        
        filter_info = INSTAGRAM_FILTERS[filter_id]
        video_count = user_states[user_id].get('video_count', 1)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states[user_id].update({
            'status': 'processing',
            'filter': filter_info['name'],
            'filter_id': filter_id
        })
        
        await query.edit_message_text(
            f"üé¨ –°–æ–∑–¥–∞—é {video_count} –≤–∏–¥–µ–æ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º {filter_info['name']}...\n"
            "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç..."
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(
            self.process_multiple_videos(user_id, query, filter_id, video_count, context)
        )
    
    async def handle_quick_approval(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        action, approval_id = query.data.split('_', 2)[1], query.data.split('_', 2)[2]
        
        if approval_id not in pending_approvals:
            await query.edit_message_text("‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥–∏.")
            return
        
        video_data = pending_approvals[approval_id]
        
        try:
            if action == "approve":
                # –û–¥–æ–±—Ä—è–µ–º –≤–∏–¥–µ–æ
                logger.info(f"–ù–∞—á–∏–Ω–∞—é –æ–¥–æ–±—Ä–µ–Ω–∏–µ –≤–∏–¥–µ–æ {approval_id}")
                success = await self.move_to_approved_folder(video_data, approval_id)
                logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: {success}")
                if not success:
                    await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ Yandex Disk")
                    return
                video_data['status'] = 'approved'
                
                await query.edit_message_text(
                    f"‚úÖ **–í–ò–î–ï–û –û–î–û–ë–†–ï–ù–û!**\n\n"
                    f"üÜî ID: {approval_id}\n"
                    f"üë§ –ë–ª–æ–≥–µ—Ä: {video_data['blogger_name']}\n"
                    f"üìÅ –ü–∞–ø–∫–∞: {video_data['folder_name']}\n"
                    f"üìÇ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤: approved/\n\n"
                    f"üéâ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!"
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await context.bot.send_message(
                    chat_id=video_data['user_id'],
                    text=f"üéâ **–í–∞—à–µ –≤–∏–¥–µ–æ –æ–¥–æ–±—Ä–µ–Ω–æ!**\n\n"
                         f"üÜî ID: {approval_id}\n"
                         f"üë§ –ë–ª–æ–≥–µ—Ä: {video_data['blogger_name']}\n"
                         f"üìÅ –ü–∞–ø–∫–∞: {video_data['folder_name']}\n"
                         f"‚úÖ –°—Ç–∞—Ç—É—Å: –û–¥–æ–±—Ä–µ–Ω–æ"
                )
                
            elif action == "reject":
                # –û—Ç–∫–ª–æ–Ω—è–µ–º –≤–∏–¥–µ–æ
                video_data['status'] = 'rejected'
                
                await query.edit_message_text(
                    f"‚ùå **–í–ò–î–ï–û –û–¢–ö–õ–û–ù–ï–ù–û**\n\n"
                    f"üÜî ID: {approval_id}\n"
                    f"üë§ –ë–ª–æ–≥–µ—Ä: {video_data['blogger_name']}\n"
                    f"üìÅ –ü–∞–ø–∫–∞: {video_data['folder_name']}\n"
                    f"üìÇ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤: not_approved/\n\n"
                    f"üí° –í–∏–¥–µ–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏"
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await context.bot.send_message(
                    chat_id=video_data['user_id'],
                    text=f"‚ùå **–í–∏–¥–µ–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ**\n\n"
                         f"üÜî ID: {approval_id}\n"
                         f"üë§ –ë–ª–æ–≥–µ—Ä: {video_data['blogger_name']}\n"
                         f"üìÅ –ü–∞–ø–∫–∞: {video_data['folder_name']}\n"
                         f"‚ùå –°—Ç–∞—Ç—É—Å: –û—Ç–∫–ª–æ–Ω–µ–Ω–æ\n\n"
                         f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è: {e}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
    
    async def process_multiple_videos(self, user_id: int, query, filter_id: str, video_count: int, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∏–¥–µ–æ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ü–ï–†–ï–î –ø–æ–ø—ã—Ç–∫–æ–π get_file()
            file_size_mb = user_states[user_id]['file_size'] / (1024 * 1024)
            logger.info(f"üì• –ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {user_states[user_id]['filename']}, —Ä–∞–∑–º–µ—Ä: {file_size_mb:.1f} MB")
            
            # Railway deployment - u≈ºywamy 2GB limit zamiast 20MB
            railway_limit_mb = 2000  # 2GB limit na Railway
            logger.info(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_mb:.1f} MB, –ª–∏–º–∏—Ç Railway: {railway_limit_mb} MB")
            if file_size_mb > railway_limit_mb:  # Je≈õli —Ñ–∞–π–ª –±–æ–ª—å—à–µ 2GB, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∂–∏–º–∞–µ–º
                logger.info(f"üö® –§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç Railway –ª–∏–º–∏—Ç! –ù–∞—á–∏–Ω–∞—é –∫–æ–º–ø—Ä–µ—Å—Å–∏—é...")
                await query.message.edit_text(
                    f"üì¶ **–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ö–û–ú–ü–†–ï–°–°–ò–Ø**\n\n"
                    f"üìÅ –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} MB\n"
                    f"üìÅ –ò–º—è: {user_states[user_id]['filename']}\n\n"
                    f"üîÑ –°–∂–∏–º–∞—é –¥–æ < {railway_limit_mb}MB...\n"
                    f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏ (Telegram API –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã >20MB)
                await query.message.edit_text(
                    f"üì¶ **–ö–û–ú–ü–†–ï–°–°–ò–Ø –¢–†–ï–ë–£–ï–¢–°–Ø**\n\n"
                    f"üìÅ –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} MB\n"
                    f"üìÅ –ò–º—è: {user_states[user_id]['filename']}\n\n"
                    f"üí° **Telegram API limit: 20MB**\n"
                    f"üö´ **–ù–µ –º–æ–≥—É —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏**\n\n"
                    f"üîÑ **–ë—ã—Å—Ç—Ä—ã–µ —Ä–µ—à–µ–Ω–∏—è:**\n\n"
                    f"üì± **–ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:**\n"
                    f"‚Ä¢ Video Compressor (Android)\n"
                    f"‚Ä¢ Video Compress (iOS)\n"
                    f"‚Ä¢ InShot (Android/iOS)\n\n"
                    f"üíª **–û–Ω–ª–∞–π–Ω-—Å–∂–∞—Ç–∏–µ:**\n"
                    f"‚Ä¢ https://www.freeconvert.com/video-compressor\n"
                    f"‚Ä¢ https://www.clideo.com/compress-video\n"
                    f"‚Ä¢ https://www.kapwing.com/tools/compress-video\n\n"
                    f"‚ö° **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
                    f"‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: 720p –∏–ª–∏ –Ω–∏–∂–µ\n"
                    f"‚Ä¢ –ë–∏—Ç—Ä–µ–π—Ç: 1-2 Mbps\n"
                    f"‚Ä¢ –†–∞–∑–º–µ—Ä: < 20MB\n\n"
                    f"‚è≥ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∂–∞—Ç–æ–µ –≤–∏–¥–µ–æ –±–æ—Ç—É..."
                )
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∂–¥–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                user_states[user_id]['status'] = 'waiting_for_compressed_video'
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ context —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä OK
            try:
                logger.info(f"üì• Pobieranie pliku: {user_states[user_id]['filename']}, rozmiar: {user_states[user_id]['file_size']} bytes")
                file = await context.bot.get_file(user_states[user_id]['file_id'])
                logger.info(f"‚úÖ Plik pobrany pomy≈õlnie: {file.file_path}")
            except Exception as e:
                logger.error(f"‚ùå B≈ÇƒÖd pobierania pliku: {e}")
                if "File is too big" in str(e):
                    file_size_mb = user_states[user_id]['file_size'] / (1024*1024)
                    await query.message.edit_text(
                        f"‚ö†Ô∏è **–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ Telegram API!**\n\n"
                        f"üìÅ –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} MB\n"
                        f"üìÅ –ò–º—è: {user_states[user_id]['filename']}\n\n"
                        f"üí° **–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π API limit: 20MB**\n\n"
                        f"üîÑ **–†–µ—à–µ–Ω–∏—è:**\n"
                        f"‚Ä¢ **–°–æ–∂–º–∏—Ç–µ –≤–∏–¥–µ–æ** –¥–æ < 20MB –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞\n"
                        f"‚Ä¢ **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ self-hosted Bot API** (2GB limit)\n"
                        f"‚Ä¢ **–†–∞–∑–¥–µ–ª–∏—Ç–µ –Ω–∞ —á–∞—Å—Ç–∏**\n\n"
                        f"üîß **–î–ª—è Railway deployment:**\n"
                        f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ self-hosted Bot API\n"
                        f"‚Ä¢ –ò–ª–∏ —Å–æ–∂–º–∏—Ç–µ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π\n\n"
                        f"üì± **–ë—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ:**\n"
                        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∂–∞—Ç–æ–µ –≤–∏–¥–µ–æ < 20MB"
                    )
                    return
                else:
                    raise e
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            unique_id = str(uuid.uuid4())[:8]
            input_filename = f"input_{unique_id}.mp4"
            input_path = self.temp_dir / input_filename
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            await file.download_to_drive(input_path)
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results_folder = self.results_dir / f"batch_{unique_id}"
            results_folder.mkdir(exist_ok=True)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –≤–∏–¥–µ–æ
            processed_videos = []
            for i in range(video_count):
                try:
                    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ
                    output_filename = f"output_{unique_id}_{i+1}.mp4"
                    output_path = results_folder / output_filename
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
                    uniquizer = VideoUniquizer()
                    filter_info = INSTAGRAM_FILTERS[filter_id]
                    
                    result_path = uniquizer.uniquize_video(
                        input_path=str(input_path),
                        output_path=str(output_path),
                        effects=filter_info['effects']
                    )
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ Yandex Disk
                    yandex_url = None
                    yandex_remote_path = None
                    if self.yandex_disk:
                        yandex_url, yandex_remote_path = await self.upload_to_yandex_disk(
                            result_path, user_id, f"{filter_id}_{i+1}"
                        )
                    
                    processed_videos.append({
                        'path': result_path,
                        'yandex_url': yandex_url,
                        'yandex_remote_path': yandex_remote_path,
                        'index': i + 1
                    })
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    progress = f"üé¨ –°–æ–∑–¥–∞–Ω–æ {i+1}/{video_count} –≤–∏–¥–µ–æ..."
                    await query.edit_message_text(progress)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ {i+1}: {e}")
                    continue
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –≤–∏–¥–µ–æ
            for video_data in processed_videos:
                try:
                    await query.message.reply_video(
                        video=open(video_data['path'], 'rb'),
                        caption=f"‚úÖ –í–∏–¥–µ–æ {video_data['index']}/{video_count}\n"
                               f"üé® –§–∏–ª—å—Ç—Ä: {filter_info['name']}\n"
                               f"üìÅ –†–∞–∑–º–µ—Ä: {os.path.getsize(video_data['path']) / (1024*1024):.1f} MB"
                               + (f"\n‚òÅÔ∏è Yandex Disk: {video_data['yandex_url']}" if video_data['yandex_url'] else ""),
                        supports_streaming=True
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ {video_data['index']}: {e}")
            
            # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª, –≤—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Yandex Disk
            input_path.unlink(missing_ok=True)
            logger.info("–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω, –≤—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Yandex Disk")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            user_states[user_id]['status'] = 'completed'
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤–∏–¥–µ–æ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –∞–ø–ø—Ä—É–≤
            for i, video_data in enumerate(processed_videos):
                approval_id = str(uuid.uuid4())[:8]
                pending_approvals[approval_id] = {
                    'status': 'pending',
                    'user_id': user_id,
                    'user_name': query.from_user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    'filename': user_states[user_id]['filename'],
                    'filter': filter_info['name'],
                    'video_path': video_data['path'],
                    'yandex_remote_path': video_data['yandex_remote_path'],
                    'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                    'approval_id': approval_id,
                    'batch_index': i + 1,
                    'batch_total': video_count
                }
            
            await query.message.reply_text(
                f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(processed_videos)} –≤–∏–¥–µ–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –∞–ø–ø—Ä—É–≤!\n"
                f"‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞."
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ: {e}")
            await query.message.reply_text(
                text=f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"
            )
            user_states[user_id]['status'] = 'error'
    
    async def process_video(self, user_id: int, query, filter_id: str, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –≤ —Ñ–æ–Ω–µ"""
        try:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            filter_info = INSTAGRAM_FILTERS[filter_id]
            await query.edit_message_text(
                f"üîÑ **–ù–ê–ß–ò–ù–ê–Æ –û–ë–†–ê–ë–û–¢–ö–£ –í–ò–î–ï–û**\n\n"
                f"üé® –§–∏–ª—å—Ç—Ä: {filter_info['name']}\n"
                f"üìÅ –§–∞–π–ª –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–ø–∫–µ:\n"
                f"`{self.temp_dir}`\n\n"
                f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ü–ï–†–ï–î –ø–æ–ø—ã—Ç–∫–æ–π get_file()
            file_size_mb = user_states[user_id]['file_size'] / (1024 * 1024)
            logger.info(f"üì• –ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {user_states[user_id]['filename']}, —Ä–∞–∑–º–µ—Ä: {file_size_mb:.1f} MB")
            
            # Railway deployment - u≈ºywamy 2GB limit zamiast 20MB
            railway_limit_mb = 2000  # 2GB limit na Railway
            logger.info(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_mb:.1f} MB, –ª–∏–º–∏—Ç Railway: {railway_limit_mb} MB")
            if file_size_mb > railway_limit_mb:  # Je≈õli —Ñ–∞–π–ª –±–æ–ª—å—à–µ 2GB, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∂–∏–º–∞–µ–º
                logger.info(f"üö® –§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç Railway –ª–∏–º–∏—Ç! –ù–∞—á–∏–Ω–∞—é –∫–æ–º–ø—Ä–µ—Å—Å–∏—é...")
                await query.message.edit_text(
                    f"üì¶ **–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ö–û–ú–ü–†–ï–°–°–ò–Ø**\n\n"
                    f"üìÅ –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} MB\n"
                    f"üìÅ –ò–º—è: {user_states[user_id]['filename']}\n\n"
                    f"üîÑ –°–∂–∏–º–∞—é –¥–æ < {railway_limit_mb}MB...\n"
                    f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏ (Telegram API –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã >20MB)
                await query.message.edit_text(
                    f"üì¶ **–ö–û–ú–ü–†–ï–°–°–ò–Ø –¢–†–ï–ë–£–ï–¢–°–Ø**\n\n"
                    f"üìÅ –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} MB\n"
                    f"üìÅ –ò–º—è: {user_states[user_id]['filename']}\n\n"
                    f"üí° **Telegram API limit: 20MB**\n"
                    f"üö´ **–ù–µ –º–æ–≥—É —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏**\n\n"
                    f"üîÑ **–ë—ã—Å—Ç—Ä—ã–µ —Ä–µ—à–µ–Ω–∏—è:**\n\n"
                    f"üì± **–ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:**\n"
                    f"‚Ä¢ Video Compressor (Android)\n"
                    f"‚Ä¢ Video Compress (iOS)\n"
                    f"‚Ä¢ InShot (Android/iOS)\n\n"
                    f"üíª **–û–Ω–ª–∞–π–Ω-—Å–∂–∞—Ç–∏–µ:**\n"
                    f"‚Ä¢ https://www.freeconvert.com/video-compressor\n"
                    f"‚Ä¢ https://www.clideo.com/compress-video\n"
                    f"‚Ä¢ https://www.kapwing.com/tools/compress-video\n\n"
                    f"‚ö° **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
                    f"‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: 720p –∏–ª–∏ –Ω–∏–∂–µ\n"
                    f"‚Ä¢ –ë–∏—Ç—Ä–µ–π—Ç: 1-2 Mbps\n"
                    f"‚Ä¢ –†–∞–∑–º–µ—Ä: < 20MB\n\n"
                    f"‚è≥ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∂–∞—Ç–æ–µ –≤–∏–¥–µ–æ –±–æ—Ç—É..."
                )
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∂–¥–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                user_states[user_id]['status'] = 'waiting_for_compressed_video'
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ context —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä OK
            try:
                logger.info(f"üì• Pobieranie pliku: {user_states[user_id]['filename']}, rozmiar: {user_states[user_id]['file_size']} bytes")
                file = await context.bot.get_file(user_states[user_id]['file_id'])
                logger.info(f"‚úÖ Plik pobrany pomy≈õlnie: {file.file_path}")
            except Exception as e:
                logger.error(f"‚ùå B≈ÇƒÖd pobierania pliku: {e}")
                if "File is too big" in str(e):
                    file_size_mb = user_states[user_id]['file_size'] / (1024*1024)
                    await query.message.edit_text(
                        f"‚ö†Ô∏è **–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ Telegram API!**\n\n"
                        f"üìÅ –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} MB\n"
                        f"üìÅ –ò–º—è: {user_states[user_id]['filename']}\n\n"
                        f"üí° **–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π API limit: 20MB**\n\n"
                        f"üîÑ **–†–µ—à–µ–Ω–∏—è:**\n"
                        f"‚Ä¢ **–°–æ–∂–º–∏—Ç–µ –≤–∏–¥–µ–æ** –¥–æ < 20MB –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞\n"
                        f"‚Ä¢ **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ self-hosted Bot API** (2GB limit)\n"
                        f"‚Ä¢ **–†–∞–∑–¥–µ–ª–∏—Ç–µ –Ω–∞ —á–∞—Å—Ç–∏**\n\n"
                        f"üîß **–î–ª—è Railway deployment:**\n"
                        f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ self-hosted Bot API\n"
                        f"‚Ä¢ –ò–ª–∏ —Å–æ–∂–º–∏—Ç–µ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π\n\n"
                        f"üì± **–ë—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ:**\n"
                        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∂–∞—Ç–æ–µ –≤–∏–¥–µ–æ < 20MB"
                    )
                    return
                else:
                    raise e
            
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π –∏ ID —Ä–æ–ª–∏–∫–∞
            video_id = user_states[user_id].get('video_id', 'unknown')
            upload_date = datetime.now().strftime('%Y%m%d')
            unique_id = str(uuid.uuid4())[:8]
            
            input_filename = f"input_{unique_id}.mp4"
            output_filename = f"{upload_date}_{video_id}.mp4"
            
            input_path = self.temp_dir / input_filename
            output_path = self.temp_dir / output_filename
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            await file.download_to_drive(input_path)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await query.edit_message_text(
                f"üé¨ **–û–ë–†–ê–ë–ê–¢–´–í–ê–Æ –í–ò–î–ï–û**\n\n"
                f"üé® –§–∏–ª—å—Ç—Ä: {filter_info['name']}\n"
                f"üìÇ –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: `{input_path}`\n"
                f"üìÇ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: `{output_path}`\n\n"
                f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç..."
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
            uniquizer = VideoUniquizer()
            
            result_path = uniquizer.uniquize_video(
                input_path=str(input_path),
                output_path=str(output_path),
                effects=filter_info['effects']
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await query.edit_message_text(
                f"‚úÖ **–û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!**\n\n"
                f"üé® –§–∏–ª—å—Ç—Ä: {filter_info['name']}\n"
                f"üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: `{result_path}`\n"
                f"üìä –†–∞–∑–º–µ—Ä: {os.path.getsize(result_path) / (1024*1024):.1f} MB\n\n"
                f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ..."
            )
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ Yandex Disk
            yandex_url = None
            yandex_remote_path = None
            if self.yandex_disk:
                yandex_url, yandex_remote_path = await self.upload_to_yandex_disk(
                    result_path, user_id, filter_id
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å WebSocket progress
            result_filename = f"processed_{user_id}_{filter_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.mp4"
            upload_result = await self.upload_video_with_progress(
                file_path=result_path,
                user_id=user_id,
                context=context,
                filename=result_filename,
                caption=f"‚úÖ **–ì–û–¢–û–í–û!**\n\n"
                       f"üé® –§–∏–ª—å—Ç—Ä: {filter_info['name']}\n"
                       f"üìÅ –†–∞–∑–º–µ—Ä: {os.path.getsize(result_path) / (1024*1024):.1f} MB\n"
                       f"üìÇ –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å: `{result_path}`"
                       + (f"\n‚òÅÔ∏è Yandex Disk: {yandex_url}" if yandex_url else "")
            )
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            input_path.unlink(missing_ok=True)
            output_path.unlink(missing_ok=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            user_states[user_id]['status'] = 'completed'
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –∞–ø–ø—Ä—É–≤
            approval_id = str(uuid.uuid4())[:8]
            pending_approvals[approval_id] = {
                'status': 'pending',
                'user_id': user_id,
                'user_name': query.from_user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                'filename': user_states[user_id]['filename'],
                'filter': filter_info['name'],
                'video_path': result_path,
                'yandex_remote_path': yandex_remote_path,
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'approval_id': approval_id
            }
            
            await query.message.reply_text(
                f"‚úÖ –í–∏–¥–µ–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –∞–ø–ø—Ä—É–≤!\n"
                f"üÜî ID –∞–ø–ø—Ä—É–≤–∞: {approval_id}\n"
                f"‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞."
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {e}")
            await query.message.reply_text(
                text=f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"
            )
            user_states[user_id]['status'] = 'error'
    
    def split_video_into_chunks_sync(self, file_path: str, chunk_duration: int = 30) -> list:
        """–†–∞–∑–¥–µ–ª—è–µ—Ç –≤–∏–¥–µ–æ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            import subprocess
            import os
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
            cmd = ['ffprobe', '-v', 'quiet', '-show_entries', 'format=duration', '-of', 'csv=p=0', file_path]
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode != 0:
                return [file_path]  # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
            
            duration = float(result.stdout.strip())
            if duration <= chunk_duration:
                return [file_path]  # –ï—Å–ª–∏ –≤–∏–¥–µ–æ –∫–æ—Ä–æ—Ç–∫–æ–µ, –Ω–µ —Ä–∞–∑–¥–µ–ª—è–µ–º
            
            logger.info(f"üîÑ –†–∞–∑–¥–µ–ª—è—é –≤–∏–¥–µ–æ –Ω–∞ —á–∞—Å—Ç–∏: {duration:.1f}s -> {chunk_duration}s —á–∞—Å—Ç–∏")
            print(f"üìπ –†–ê–ó–î–ï–õ–ï–ù–ò–ï –í–ò–î–ï–û: {duration:.1f}s -> {chunk_duration}s —á–∞—Å—Ç–∏")
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —á–∞—Å—Ç–µ–π
            chunks_dir = file_path.replace('.mp4', '_chunks')
            os.makedirs(chunks_dir, exist_ok=True)
            
            chunks = []
            chunk_count = int(duration / chunk_duration) + 1
            
            for i in range(chunk_count):
                start_time = i * chunk_duration
                chunk_path = os.path.join(chunks_dir, f"chunk_{i:02d}.mp4")
                
                cmd = [
                    'ffmpeg', '-i', file_path,
                    '-ss', str(start_time),
                    '-t', str(chunk_duration),
                    '-c', 'copy',  # –ö–æ–ø–∏—Ä—É–µ–º –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
                    '-y',
                    chunk_path
                ]
                
                result = subprocess.run(cmd, capture_output=True, text=True)
                
                if result.returncode == 0 and os.path.exists(chunk_path):
                    chunks.append(chunk_path)
                    logger.info(f"‚úÖ –ß–∞—Å—Ç—å {i+1}/{chunk_count} —Å–æ–∑–¥–∞–Ω–∞: {chunk_path}")
                    print(f"‚úÖ –ß–ê–°–¢–¨ {i+1}/{chunk_count}: {chunk_path}")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Å—Ç–∏ {i+1}: {result.stderr}")
                    print(f"‚ùå –û–®–ò–ë–ö–ê –ß–ê–°–¢–ò {i+1}: {result.stderr}")
            
            return chunks if chunks else [file_path]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ: {e}")
            print(f"‚ùå –û–®–ò–ë–ö–ê –†–ê–ó–î–ï–õ–ï–ù–ò–Ø: {e}")
            return [file_path]
    
    def merge_video_chunks_sync(self, chunks: list, output_path: str) -> str:
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —á–∞—Å—Ç–∏ –≤–∏–¥–µ–æ –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª"""
        try:
            import subprocess
            import os
            
            if len(chunks) <= 1:
                return chunks[0] if chunks else None
            
            logger.info(f"üîÑ –û–±—ä–µ–¥–∏–Ω—è—é {len(chunks)} —á–∞—Å—Ç–µ–π –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª")
            print(f"üîó –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï: {len(chunks)} —á–∞—Å—Ç–µ–π -> {output_path}")
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è ffmpeg
            concat_file = output_path.replace('.mp4', '_concat.txt')
            with open(concat_file, 'w') as f:
                for chunk in chunks:
                    f.write(f"file '{chunk}'\n")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —á–∞—Å—Ç–∏
            cmd = [
                'ffmpeg', '-f', 'concat', '-safe', '0',
                '-i', concat_file,
                '-c', 'copy',
                '-y',
                output_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0 and os.path.exists(output_path):
                logger.info(f"‚úÖ –í–∏–¥–µ–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ: {output_path}")
                print(f"‚úÖ –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û: {output_path}")
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                os.remove(concat_file)
                for chunk in chunks:
                    if os.path.exists(chunk):
                        os.remove(chunk)
                
                return output_path
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {result.stderr}")
                print(f"‚ùå –û–®–ò–ë–ö–ê –û–ë–™–ï–î–ò–ù–ï–ù–ò–Ø: {result.stderr}")
                return chunks[0] if chunks else None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ: {e}")
            print(f"‚ùå –û–®–ò–ë–ö–ê –û–ë–™–ï–î–ò–ù–ï–ù–ò–Ø: {e}")
            return chunks[0] if chunks else None
    
    async def compress_video_automatically(self, file_id: str, filename: str, context, user_id: int) -> dict:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∂–∏–º–∞–µ—Ç –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã"""
        try:
            import tempfile
            import os
            import requests
            import subprocess
            
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–æ–º–ø—Ä–µ—Å—Å–∏—é: {filename}")
            logger.info(f"üìÅ File ID: {file_id}")
            logger.info(f"üë§ User ID: {user_id}")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
            with tempfile.TemporaryDirectory() as temp_dir:
                logger.info(f"üìÇ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞: {temp_dir}")
                # –ú–µ—Ç–æ–¥ 1: –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª —á–µ—Ä–µ–∑ get_file (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤)
                try:
                    file = await context.bot.get_file(file_id)
                    temp_input = os.path.join(temp_dir, f"input_{file_id}.mp4")
                    await file.download_to_drive(temp_input)
                    logger.info(f"‚úÖ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ get_file: {temp_input}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è get_file –Ω–µ —É–¥–∞–ª—Å—è: {e}")
                    
                    # –ú–µ—Ç–æ–¥ 2: –ü—Ä—è–º–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ URL
                    try:
                        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_id}"
                        response = requests.get(file_url, stream=True, timeout=30)
                        
                        if response.status_code == 200:
                            temp_input = os.path.join(temp_dir, f"input_{file_id}.mp4")
                            with open(temp_input, 'wb') as f:
                                for chunk in response.iter_content(chunk_size=8192):
                                    f.write(chunk)
                            logger.info(f"‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω –Ω–∞–ø—Ä—è–º—É—é: {temp_input}")
                        else:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {response.status_code}")
                            return None
                    except Exception as e2:
                        logger.error(f"‚ùå –ü—Ä—è–º–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {e2}")
                        return None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                input_size = os.path.getsize(temp_input)
                input_size_mb = input_size / (1024 * 1024)
                logger.info(f"üìÅ –†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {input_size_mb:.1f} MB")
                
                # –°–∂–∏–º–∞–µ–º —Ñ–∞–π–ª —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                compressed_path = os.path.join(temp_dir, f"compressed_{file_id}.mp4")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –±–∏—Ç—Ä–µ–π—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞
                target_bitrate = "500k" if input_size_mb > 50 else "1000k"
                
                cmd = [
                    'ffmpeg', '-i', temp_input,
                    '-c:v', 'libx264',
                    '-crf', '32',  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∫–æ–º–ø—Ä–µ—Å—Å–∏—è
                    '-preset', 'ultrafast',  # –ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–ø—Ä–µ—Å—Å–∏—è
                    '-c:a', 'aac',
                    '-b:a', '64k',  # –ù–∏–∑–∫–∏–π –±–∏—Ç—Ä–µ–π—Ç –∞—É–¥–∏–æ
                    '-vf', 'scale=854:480',  # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–æ 480p
                    '-b:v', target_bitrate,
                    '-maxrate', target_bitrate,
                    '-bufsize', f"{int(target_bitrate.replace('k', '')) * 2}k",
                    '-y',
                    compressed_path
                ]
                
                logger.info(f"üîÑ –ö–æ–º–ø—Ä–µ—Å—Å–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {target_bitrate}, 480p")
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
                
                if result.returncode == 0 and os.path.exists(compressed_path):
                    compressed_size = os.path.getsize(compressed_path)
                    compressed_size_mb = compressed_size / (1024 * 1024)
                    
                    logger.info(f"‚úÖ –ö–æ–º–ø—Ä–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {input_size_mb:.1f} MB -> {compressed_size_mb:.1f} MB")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–∂–∞—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
                    if compressed_size < 20 * 1024 * 1024:  # < 20MB
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∂–∞—Ç—ã–π —Ñ–∞–π–ª –æ–±—Ä–∞—Ç–Ω–æ –≤ Telegram
                        with open(compressed_path, 'rb') as f:
                            message = await context.bot.send_document(
                                chat_id=user_id,
                                document=f,
                                filename=f"compressed_{filename}",
                                caption=f"üì¶ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∂–∞—Ç–æ–µ –≤–∏–¥–µ–æ\nüìÅ –†–∞–∑–º–µ—Ä: {compressed_size_mb:.1f} MB"
                            )
                        
                        logger.info(f"‚úÖ –°–∂–∞—Ç—ã–π —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {message.document.file_id}")
                        
                        return {
                            'file_id': message.document.file_id,
                            'file_size': message.document.file_size,
                            'filename': message.document.file_name
                        }
                    else:
                        logger.error(f"‚ùå –°–∂–∞—Ç—ã–π —Ñ–∞–π–ª –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {compressed_size_mb:.1f} MB")
                        return None
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏: {result.stderr}")
                    return None
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏: {e}")
            return None
    
    async def compress_and_reupload_video(self, file_id: str, filename: str, context, user_id: int) -> dict:
        """–°–∂–∏–º–∞–µ—Ç –≤–∏–¥–µ–æ –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ Telegram"""
        try:
            import tempfile
            import os
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
            with tempfile.TemporaryDirectory() as temp_dir:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π URL –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
                    file_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_id}"
                    
                    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
                    import requests
                    response = requests.get(file_url, stream=True)
                    
                    if response.status_code == 200:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        temp_input = os.path.join(temp_dir, f"input_{file_id}.mp4")
                        with open(temp_input, 'wb') as f:
                            for chunk in response.iter_content(chunk_size=8192):
                                f.write(chunk)
                        
                        logger.info(f"‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω –Ω–∞–ø—Ä—è–º—É—é: {temp_input}")
                        
                        # –°–∂–∏–º–∞–µ–º —Ñ–∞–π–ª
                        compressed_path = os.path.join(temp_dir, f"compressed_{file_id}.mp4")
                        
                        cmd = [
                            'ffmpeg', '-i', temp_input,
                            '-c:v', 'libx264',
                            '-crf', '30',  # –í—ã—Å–æ–∫–∞—è –∫–æ–º–ø—Ä–µ—Å—Å–∏—è
                            '-preset', 'fast',
                            '-c:a', 'aac',
                            '-b:a', '96k',
                            '-vf', 'scale=1280:720',  # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–æ 720p
                            '-y',
                            compressed_path
                        ]
                        
                        import subprocess
                        result = subprocess.run(cmd, capture_output=True, text=True)
                        
                        if result.returncode == 0 and os.path.exists(compressed_path):
                            compressed_size = os.path.getsize(compressed_path)
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–∂–∞—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
                            if compressed_size < 20 * 1024 * 1024:  # < 20MB
                                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∂–∞—Ç—ã–π —Ñ–∞–π–ª –æ–±—Ä–∞—Ç–Ω–æ –≤ Telegram
                                with open(compressed_path, 'rb') as f:
                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                                    message = await context.bot.send_document(
                                        chat_id=user_id,
                                        document=f,
                                        filename=f"compressed_{filename}",
                                        caption="üì¶ –°–∂–∞—Ç–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
                                    )
                                
                                return {
                                    'file_id': message.document.file_id,
                                    'file_size': message.document.file_size,
                                    'filename': message.document.file_name
                                }
                            else:
                                logger.error(f"‚ùå –°–∂–∞—Ç—ã–π —Ñ–∞–π–ª –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {compressed_size / (1024*1024):.1f} MB")
                                return None
                        else:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è: {result.stderr}")
                            return None
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {response.status_code}")
                        return None
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
                    return None
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return None
    
    def trim_video_if_needed_sync(self, file_path: str, max_duration_seconds: int = 60) -> str:
        """–û–±—Ä–µ–∑–∞–µ—Ç –≤–∏–¥–µ–æ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ"""
        try:
            import subprocess
            import os
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
            cmd = ['ffprobe', '-v', 'quiet', '-show_entries', 'format=duration', '-of', 'csv=p=0', file_path]
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode != 0:
                return file_path
            
            duration = float(result.stdout.strip())
            if duration <= max_duration_seconds:
                return file_path
            
            logger.info(f"üîÑ –û–±—Ä–µ–∑–∞—é –≤–∏–¥–µ–æ: {duration:.1f}s -> {max_duration_seconds}s")
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            trimmed_path = file_path.replace('.mp4', '_trimmed.mp4')
            
            cmd = [
                'ffmpeg', '-i', file_path,
                '-t', str(max_duration_seconds),  # –û–±—Ä–µ–∑–∞–µ–º –¥–æ max_duration_seconds
                '-c', 'copy',  # –ö–æ–ø–∏—Ä—É–µ–º –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
                '-y',  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª
                trimmed_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0 and os.path.exists(trimmed_path):
                trimmed_size_mb = os.path.getsize(trimmed_path) / (1024 * 1024)
                logger.info(f"‚úÖ –í–∏–¥–µ–æ –æ–±—Ä–µ–∑–∞–Ω–æ: {duration:.1f}s -> {max_duration_seconds}s, —Ä–∞–∑–º–µ—Ä: {trimmed_size_mb:.1f} MB")
                
                # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                os.remove(file_path)
                return trimmed_path
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∫–∏: {result.stderr}")
                return file_path
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∫–∏ –≤–∏–¥–µ–æ: {e}")
            return file_path
    
    def compress_video_if_needed_sync(self, file_path: str, max_size_mb: int = 2000) -> str:
        """–°–∂–∏–º–∞–µ—Ç –≤–∏–¥–µ–æ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            import subprocess
            import os
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size_mb = os.path.getsize(file_path) / (1024 * 1024)
            if file_size_mb <= max_size_mb:
                return file_path
            
            logger.info(f"üîÑ –°–∂–∏–º–∞—é –≤–∏–¥–µ–æ: {file_size_mb:.1f} MB -> {max_size_mb} MB")
            print(f"üì¶ –ö–û–ú–ü–†–ï–°–°–ò–Ø: {file_size_mb:.1f} MB -> {max_size_mb} MB")
            
            # –°–æ–∑–¥–∞–µ–º —Å–∂–∞—Ç—ã–π —Ñ–∞–π–ª
            compressed_path = file_path.replace('.mp4', '_compressed.mp4')
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg –¥–ª—è —Å–∂–∞—Ç–∏—è z lepszymi parametrami dla .MOV
            cmd = [
                'ffmpeg', '-i', file_path,
                '-c:v', 'libx264',
                '-crf', '30',  # Wiƒôksza kompresja dla .MOV
                '-preset', 'fast',
                '-c:a', 'aac',
                '-b:a', '96k',  # Ni≈ºszy bitrate audio
                '-vf', 'scale=1280:720',  # Skalowanie do 720p
                '-y',  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª
                compressed_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0 and os.path.exists(compressed_path):
                compressed_size_mb = os.path.getsize(compressed_path) / (1024 * 1024)
                logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–∂–∞—Ç–æ: {file_size_mb:.1f} MB -> {compressed_size_mb:.1f} MB")
                
                # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                os.remove(file_path)
                return compressed_path
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è: {result.stderr}")
                return file_path
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ: {e}")
            return file_path
    
    async def compress_video_if_needed(self, file_path: str, max_size_mb: int = 2000) -> str:
        """–°–∂–∏–º–∞–µ—Ç –≤–∏–¥–µ–æ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ"""
        try:
            import subprocess
            import os
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size_mb = os.path.getsize(file_path) / (1024 * 1024)
            if file_size_mb <= max_size_mb:
                return file_path
            
            logger.info(f"üîÑ –°–∂–∏–º–∞—é –≤–∏–¥–µ–æ: {file_size_mb:.1f} MB -> {max_size_mb} MB")
            print(f"üì¶ –ö–û–ú–ü–†–ï–°–°–ò–Ø: {file_size_mb:.1f} MB -> {max_size_mb} MB")
            
            # –°–æ–∑–¥–∞–µ–º —Å–∂–∞—Ç—ã–π —Ñ–∞–π–ª
            compressed_path = file_path.replace('.mp4', '_compressed.mp4')
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg –¥–ª—è —Å–∂–∞—Ç–∏—è z lepszymi parametrami dla .MOV
            cmd = [
                'ffmpeg', '-i', file_path,
                '-c:v', 'libx264',
                '-crf', '30',  # Wiƒôksza kompresja dla .MOV
                '-preset', 'fast',
                '-c:a', 'aac',
                '-b:a', '96k',  # Ni≈ºszy bitrate audio
                '-vf', 'scale=1280:720',  # Skalowanie do 720p
                '-y',  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª
                compressed_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0 and os.path.exists(compressed_path):
                compressed_size_mb = os.path.getsize(compressed_path) / (1024 * 1024)
                logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–∂–∞—Ç–æ: {file_size_mb:.1f} MB -> {compressed_size_mb:.1f} MB")
                
                # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                os.remove(file_path)
                return compressed_path
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è: {result.stderr}")
                return file_path
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ: {e}")
            return file_path
    
    async def upload_to_yandex_disk(self, file_path: str, user_id: int, filter_id: str) -> tuple:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ Yandex Disk"""
        try:
            logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ –Ω–∞ Yandex Disk: {file_path}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–≥–µ—Ä–µ –∏ –ø–∞–ø–∫–µ
            blogger_name = user_states[user_id].get('blogger_name', f'user_{user_id}')
            folder_name = user_states[user_id].get('folder_name', 'default')
            
            logger.info(f"üë§ –ë–ª–æ–≥–µ—Ä: {blogger_name}, üìÅ –ü–∞–ø–∫–∞: {folder_name}")
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            base_folder = "–ú–µ–¥–∏–∞–±–∞–Ω–∫/–ö–æ–º–∞–Ω–¥–∞ 1"
            blogger_folder = f"{base_folder}/{blogger_name}"
            content_folder = f"{blogger_folder}/{folder_name}"
            remote_folder = f"{content_folder}/run_{timestamp}"
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –ø–æ—à–∞–≥–æ–≤–æ
            try:
                # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if not self.yandex_disk.exists(base_folder):
                    self.yandex_disk.mkdir(base_folder)
                    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞: {base_folder}")
                
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –±–ª–æ–≥–µ—Ä–∞, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if not self.yandex_disk.exists(blogger_folder):
                    self.yandex_disk.mkdir(blogger_folder)
                    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –±–ª–æ–≥–µ—Ä–∞: {blogger_folder}")
                
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if not self.yandex_disk.exists(content_folder):
                    self.yandex_disk.mkdir(content_folder)
                    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_folder}")
                
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
                if not self.yandex_disk.exists(remote_folder):
                    self.yandex_disk.mkdir(remote_folder)
                    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞: {remote_folder}")
                
            except Exception as mkdir_error:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫: {mkdir_error}")
                # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –∑–∞–Ω–æ–≤–æ
                try:
                    self.yandex_disk.mkdir(remote_folder)
                except:
                    pass
            
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π –∏ ID —Ä–æ–ª–∏–∫–∞
            video_id = user_states[user_id].get('video_id', 'unknown')
            upload_date = datetime.now().strftime('%Y%m%d')
            filename = f"{upload_date}_{video_id}.mp4"
            remote_path = f"{remote_folder}/{filename}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if not os.path.exists(file_path):
                logger.error(f"‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
                return None, None
            
            logger.info(f"üìÅ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
            logger.info(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(file_path)} bytes")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            logger.info(f"‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –Ω–∞ Yandex Disk: {remote_path}")
            self.yandex_disk.upload(file_path, remote_path)
            
            # –°–æ–∑–¥–∞–µ–º –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É
            public_url = self.yandex_disk.get_download_link(remote_path)
            
            logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ Yandex Disk: {remote_path}")
            logger.info(f"üîó –ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞: {public_url}")
            return public_url, remote_path
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Yandex Disk: {e}")
            return None, None
    
    async def start_websocket_server(self):
        """Start WebSocket server for upload progress"""
        try:
            self.websocket_server = await websockets.serve(
                self.handle_websocket_connection,
                "0.0.0.0", 8081
            )
            logger.info("üöÄ WebSocket server started on port 8081")
        except Exception as e:
            logger.error(f"‚ùå Failed to start WebSocket server: {e}")
    
    async def handle_websocket_connection(self, websocket, path):
        """Handle WebSocket connections for progress updates"""
        try:
            async for message in websocket:
                data = json.loads(message)
                
                if data.get("type") == "subscribe_progress":
                    user_id = data.get("user_id")
                    if user_id in self.upload_progress:
                        self.upload_progress[user_id].add_client(websocket)
                        logger.info(f"üì° WebSocket client subscribed to user {user_id}")
                
        except websockets.exceptions.ConnectionClosed:
            # Remove client from all progress trackers
            for progress in self.upload_progress.values():
                progress.remove_client(websocket)
        except Exception as e:
            logger.error(f"‚ùå WebSocket error: {e}")
    
    async def upload_video_with_progress(self, file_path: str, user_id: int, context, 
                                      filename: str, caption: str = "") -> dict:
        """Upload video with WebSocket progress tracking"""
        try:
            file_size = os.path.getsize(file_path)
            
            # Create progress tracker
            progress = WebSocketUploadProgress(user_id, filename)
            self.upload_progress[user_id] = progress
            progress.set_status("preparing")
            
            # Chunked upload for large files
            chunk_size = 1024 * 1024  # 1MB chunks
            uploaded_bytes = 0
            
            progress.set_status("uploading")
            progress.update_progress(0, file_size)
            
            # For files > 50MB, use chunked upload
            if file_size > 50 * 1024 * 1024:
                return await self.chunked_upload(file_path, user_id, context, 
                                              filename, caption, progress)
            
            # For smaller files, use regular upload with progress
            with open(file_path, 'rb') as f:
                # Simulate progress for regular upload
                for chunk in iter(lambda: f.read(chunk_size), b''):
                    uploaded_bytes += len(chunk)
                    progress.update_progress(uploaded_bytes, file_size)
                    await asyncio.sleep(0.1)  # Small delay for progress updates
                
                # Reset file pointer
                f.seek(0)
                
                # Upload to Telegram
                message = await context.bot.send_document(
                    chat_id=user_id,
                    document=f,
                    filename=filename,
                    caption=caption
                )
            
            progress.set_status("completed")
            return {
                'file_id': message.document.file_id,
                'file_size': message.document.file_size,
                'filename': message.document.file_name
            }
            
        except Exception as e:
            if user_id in self.upload_progress:
                self.upload_progress[user_id].set_status(f"error: {str(e)}")
            logger.error(f"‚ùå Upload error: {e}")
            raise
    
    async def chunked_upload(self, file_path: str, user_id: int, context, 
                           filename: str, caption: str, progress: WebSocketUploadProgress) -> dict:
        """Chunked upload for large files"""
        try:
            file_size = os.path.getsize(file_path)
            chunk_size = 5 * 1024 * 1024  # 5MB chunks
            uploaded_chunks = 0
            total_chunks = (file_size + chunk_size - 1) // chunk_size
            
            progress.set_status("chunked_upload")
            
            # Create temporary chunks
            temp_chunks = []
            with open(file_path, 'rb') as f:
                chunk_num = 0
                while True:
                    chunk_data = f.read(chunk_size)
                    if not chunk_data:
                        break
                    
                    chunk_path = f"temp_chunk_{user_id}_{chunk_num}.tmp"
                    with open(chunk_path, 'wb') as chunk_file:
                        chunk_file.write(chunk_data)
                    temp_chunks.append(chunk_path)
                    
                    chunk_num += 1
                    uploaded_chunks += 1
                    progress.update_progress(
                        uploaded_chunks * chunk_size, 
                        file_size
                    )
            
            # Upload first chunk as main document
            with open(temp_chunks[0], 'rb') as f:
                message = await context.bot.send_document(
                    chat_id=user_id,
                    document=f,
                    filename=f"{filename}_part1",
                    caption=f"{caption}\nüì¶ –ß–∞—Å—Ç—å 1/{len(temp_chunks)}"
                )
            
            # Upload remaining chunks as separate documents
            for i, chunk_path in enumerate(temp_chunks[1:], 2):
                with open(chunk_path, 'rb') as f:
                    await context.bot.send_document(
                        chat_id=user_id,
                        document=f,
                        filename=f"{filename}_part{i}",
                        caption=f"üì¶ –ß–∞—Å—Ç—å {i}/{len(temp_chunks)}"
                    )
                
                # Clean up chunk
                os.unlink(chunk_path)
            
            # Clean up first chunk
            os.unlink(temp_chunks[0])
            
            progress.set_status("completed")
            return {
                'file_id': message.document.file_id,
                'file_size': message.document.file_size,
                'filename': message.document.file_name,
                'chunks': len(temp_chunks)
            }
            
        except Exception as e:
            progress.set_status(f"error: {str(e)}")
            logger.error(f"‚ùå Chunked upload error: {e}")
            raise


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if not TELEGRAM_BOT_TOKEN:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        return
    
    if not YANDEX_DISK_TOKEN:
        print("‚ö†Ô∏è YANDEX_DISK_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ Yandex Disk –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    bot = TelegramVideoBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è Railway
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è Railway deployment - ustawiamy timeout w Application.builder
    # Timeout settings sƒÖ ju≈º wbudowane w python-telegram-bot
    
    # Start WebSocket server for upload progress using post_init
    async def start_websocket(app):
        await bot.start_websocket_server()
    
    application.post_init = start_websocket
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start_command))
    application.add_handler(CommandHandler("help", bot.help_command))
    application.add_handler(CommandHandler("filters", bot.filters_command))
    application.add_handler(CommandHandler("status", bot.status_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    application.add_handler(CommandHandler("manager", bot.manager_command))
    application.add_handler(CommandHandler("queue", bot.queue_command))
    application.add_handler(CommandHandler("approve", bot.approve_command))
    application.add_handler(CommandHandler("approved", bot.approved_command))
    application.add_handler(CommandHandler("reject", bot.reject_command))
    application.add_handler(CommandHandler("send_to_chatbot", bot.send_to_chatbot_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.VIDEO, bot.handle_video))
    application.add_handler(MessageHandler(filters.Document.VIDEO, bot.handle_video))
    application.add_handler(MessageHandler(filters.Document.MimeType("video/quicktime"), bot.handle_video))  # .MOV files
    application.add_handler(MessageHandler(filters.Document.MimeType("video/x-msvideo"), bot.handle_video))  # .AVI files
    application.add_handler(MessageHandler(filters.Document.MimeType("video/mp4"), bot.handle_video))       # .MP4 files
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_user_metadata))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_metadata))
    application.add_handler(CallbackQueryHandler(bot.handle_count_selection, pattern="^count_"))
    application.add_handler(CallbackQueryHandler(bot.handle_group_selection, pattern="^group_"))
    application.add_handler(CallbackQueryHandler(bot.handle_filter_selection, pattern="^filter_"))
    application.add_handler(CallbackQueryHandler(bot.handle_quick_approval, pattern="^quick_(approve|reject)_"))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞...")
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    
    try:
        application.run_polling()
    except KeyboardInterrupt:
        print("\nüëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


# Health check server for Railway
class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/health':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            response = {
                "status": "healthy",
                "timestamp": datetime.now().isoformat(),
                "service": "telegram-bot"
            }
            self.wfile.write(json.dumps(response).encode())
        else:
            self.send_response(404)
            self.end_headers()

def start_health_server():
    """Start health check server in background"""
    port = int(os.getenv('PORT', 8000))
    server = HTTPServer(('0.0.0.0', port), HealthHandler)
    server.serve_forever()

if __name__ == "__main__":
    # Start health server in background thread
    health_thread = threading.Thread(target=start_health_server, daemon=True)
    health_thread.start()
    
    main()
