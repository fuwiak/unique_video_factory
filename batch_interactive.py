#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
"""

import os
import asyncio
from batch_generator import BatchVideoGenerator


def get_video_files():
    """–ù–∞–π—Ç–∏ –≤—Å–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    video_extensions = ['.mp4', '.avi', '.mov', '.mkv', '.wmv', '.flv']
    video_files = []
    
    for file in os.listdir('.'):
        if any(file.lower().endswith(ext) for ext in video_extensions):
            video_files.append(file)
    
    return sorted(video_files)


def choose_video():
    """–ü–æ–∑–≤–æ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –≤–∏–¥–µ–æ —Ñ–∞–π–ª"""
    video_files = get_video_files()
    
    if not video_files:
        print("‚ùå –í–∏–¥–µ–æ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏!")
        print("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .mp4, .avi, .mov, .mkv, .wmv, .flv")
        return None
    
    print("üìÅ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã:")
    for i, file in enumerate(video_files, 1):
        size_mb = os.path.getsize(file) / (1024*1024)
        print(f"   {i}. {file} ({size_mb:.1f} MB)")
    
    print(f"   {len(video_files) + 1}. –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π –ø—É—Ç—å")
    print()
    
    while True:
        try:
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª (–Ω–æ–º–µ—Ä): ").strip()
            
            if choice.isdigit():
                choice_num = int(choice)
                if 1 <= choice_num <= len(video_files):
                    return video_files[choice_num - 1]
                elif choice_num == len(video_files) + 1:
                    custom_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: ").strip()
                    if os.path.exists(custom_path):
                        return custom_path
                    else:
                        print("‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                        continue
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä!")
                    continue
            else:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä!")
                continue
                
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            continue


def get_generation_params():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    print("\n‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—Å–∏–π
    while True:
        try:
            n_versions = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—Å–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3): ").strip()
            if not n_versions:
                n_versions = 3
            else:
                n_versions = int(n_versions)
            
            if n_versions > 0:
                break
            else:
                print("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    
    # –ò–º—è –∑–∞–ø—É—Å–∫–∞
    run_name = input("–ò–º—è –∑–∞–ø—É—Å–∫–∞ (–æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏): ").strip()
    if not run_name:
        run_name = None
    
    return n_versions, run_name


def choose_generation_method():
    """–í—ã–±—Ä–∞—Ç—å –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    print("\nüöÄ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
    print("1. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è (async/await) - –±—ã—Å—Ç—Ä–∞—è, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–π")
    print("2. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è (multiprocessing) - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è, –Ω–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ")
    print("3. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è - —Å–∞–º–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è, –Ω–æ –º–µ–¥–ª–µ–Ω–Ω–∞—è")
    
    while True:
        try:
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ (1-3): ").strip()
            if choice in ['1', '2', '3']:
                return choice
            else:
                print("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ 1, 2 –∏–ª–∏ 3!")
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            return None


async def main_async():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üé¨ –ü–ê–ö–ï–¢–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –í–ò–î–ï–û")
    print("=" * 50)
    
    try:
        # –í—ã–±–∏—Ä–∞–µ–º –≤–∏–¥–µ–æ
        input_video = choose_video()
        if not input_video:
            return
        
        print(f"\nüìÅ –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {input_video}")
        size_mb = os.path.getsize(input_video) / (1024*1024)
        print(f"üìä –†–∞–∑–º–µ—Ä: {size_mb:.1f} MB")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        n_versions, run_name = get_generation_params()
        
        # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥
        method = choose_generation_method()
        if not method:
            return
        
        print(f"\nüìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        print(f"   –§–∞–π–ª: {input_video}")
        print(f"   –í–µ—Ä—Å–∏–π: {n_versions}")
        print(f"   –ó–∞–ø—É—Å–∫: {run_name or '–∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è'}")
        print(f"   –ú–µ—Ç–æ–¥: {['–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è', '–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è', '–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è'][int(method)-1]}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").strip().lower()
        if confirm not in ['y', 'yes', '–¥–∞', '–¥']:
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ!")
            return
        
        print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é {n_versions} –≤–µ—Ä—Å–∏–π...")
        
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        generator = BatchVideoGenerator()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        if method == "1":
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è
            result = await generator.generate_batch_async(
                input_video, n_versions, run_name
            )
        elif method == "2":
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è
            result = generator.generate_batch_parallel(
                input_video, n_versions, run_name
            )
        else:
            # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è
            result = generator.generate_batch_sequential(
                input_video, n_versions, run_name
            )
        
        print(f"\nüéâ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print(f"üìÅ –ü–∞–ø–∫–∞: {result['run_dir']}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {result['successful']}/{result['total_versions']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        run_dir = result['run_dir']
        print(f"\nüìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for i in range(1, n_versions + 1):
            version_dir = f"{run_dir}/versions/version_{i:03d}"
            if os.path.exists(version_dir):
                files = os.listdir(version_dir)
                video_files = [f for f in files if f.endswith('.mp4')]
                if video_files:
                    file_path = f"{version_dir}/{video_files[0]}"
                    size_mb = os.path.getsize(file_path) / (1024*1024)
                    print(f"   ‚Ä¢ –í–µ—Ä—Å–∏—è {i}: {size_mb:.1f} MB")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        asyncio.run(main_async())
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
